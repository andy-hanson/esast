if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'module', './ast', './Loc'], function (exports, module, _ast, _Loc) {
	'use strict';

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _Loc2 = _interopRequireDefault(_Loc);

	const fromObj = _ => {
		switch (_.type) {
			case 'Program':
				return l(_, new _ast.Program(_.body.map(fromStatement)));
			case 'Identifier':
				return fromIdentifier(_);
			case 'VariableDeclarator':
				return fromVariableDeclarator(_);
			case 'VariableDeclaration':
				return l(_, new _ast.VariableDeclaration(_.kind, _.declarations.map(fromVariableDeclarator)));
			case 'EmptyStatement':
				return l(_, new _ast.EmptyStatement());
			case 'BlockStatement':
				return l(_, fromBlockStatement(_));
			case 'ExpressionStatement':
				return l(_, new _ast.ExpressionStatement(fromExpression(_.expression)));
			case 'IfStatement':
				return l(_, new _ast.IfStatement(fromExpression(_.test), fromStatement(_.consequent), op(fromStatement, _.alternate)));
			case 'LabeledStatement':
				return l(_, new _ast.LabeledStatement(fromIdentifier(_.label), fromStatement(_.body)));
			case 'BreakStatement':
				return l(_, new _ast.BreakStatement(op(fromIdentifier, _.label)));
			case 'ContinueStatement':
				return l(_, new _ast.ContinueStatement(op(fromIdentifier, _.label)));
			case 'SwitchCase':
				return fromSwitchCase(_);
			case 'SwitchStatement':
				return l(_, new _ast.SwitchStatement(fromExpression(_.discriminant), _.cases.map(fromSwitchCase)));
			case 'ReturnStatement':
				return l(_, new _ast.ReturnStatement(op(fromExpression, _.argument)));
			case 'ThrowStatement':
				return l(_, new _ast.ThrowStatement(fromExpression(_.argument)));
			case 'CatchClause':
				return fromCatchClause(_);
			case 'TryStatement':
				return l(_, new _ast.TryStatement(fromBlockStatement(_.block), op(fromCatchClause, _.handler), op(fromBlockStatement, _.finalizer)));
			case 'WhileStatement':
				return l(_, new _ast.WhileStatement(fromExpression(_.test), fromStatement(_.body)));
			case 'DoWhileStatement':
				return l(_, new _ast.DoWhileStatement(fromStatement(_.body), fromExpression(_.test)));
			case 'ForStatement':
				return l(_, new _ast.ForStatement(op(fromExpressionOrVariableDeclaration, _.init), op(fromExpression, _.test), op(fromStatement, _.update), fromStatement(_.body)));
			case 'ForInStatement':
				return l(_, new _ast.ForInStatement(fromExpressionOrVariableDeclaration(_.left), fromExpression(_.right), fromStatement(_.body)));
			case 'ForOfStatement':
				return l(_, new _ast.ForOfStatement(fromExpressionOrVariableDeclaration(_.left), fromExpression(_.right), fromStatement(_.body)));
			case 'DebuggerStatement':
				return l(_, new _ast.DebuggerStatement());
			case 'FunctionDeclaration':
				return l(_, new _ast.FunctionDeclaration(fromIdentifier(_.id), _.params.map(fromIdentifier), fromBlockStatement(_.body), _.generator));
			case 'Literal':
				return l(_, new _ast.Literal(_.value));
			case 'ThisExpression':
				return l(_, new _ast.ThisExpression());
			case 'ArrayExpression':
				return l(_, new _ast.ArrayExpression(_.elements.map(_ => op(fromExpression, _))));
			case 'Property':
				return fromProperty(_);
			case 'ObjectExpression':
				return l(_, new _ast.ObjectExpression(_.properties.map(fromProperty)));
			case 'FunctionExpression':
				return fromFunctionExpression(_);
			case 'ArrowFunctionExpression':
				return l(_, new _ast.ArrowFunctionExpression(_.params.map(fromPattern), fromBlockStatementOrExpression(_.body)));
			case 'SequenceExpression':
				return l(_, new _ast.SequenceExpression(_.expressions.map(fromExpression)));
			case 'UnaryExpression':
				return l(_, new _ast.UnaryExpression(_.operator, fromExpression(_.argument)));
			case 'BinaryExpression':
				return l(_, new _ast.BinaryExpression(_.operator, fromExpression(_.left), fromExpression(_.right)));
			case 'AssignmentExpression':
				return l(_, new _ast.AssignmentExpression(_.operator, fromPattern(_.left), fromExpression(_.right)));
			case 'UpdateExpression':
				return l(_, new _ast.UpdateExpression(_.operator, fromExpression(_.argument), _.prefix));
			case 'LogicalExpression':
				return l(_, new _ast.LogicalExpression(_.operator, fromExpression(_.left), fromExpression(_.right)));
			case 'ConditionalExpression':
				return l(_, new _ast.ConditionalExpression(fromExpression(_.test), fromExpression(_.consequent), fromExpression(_.alternate)));
			case 'NewExpression':
				return l(_, new _ast.NewExpression(fromExpression(_.callee), _.arguments.map(fromExpression)));
			case 'CallExpression':
				return l(_, new _ast.CallExpression(fromExpression(_.callee), _.arguments.map(fromExpression)));
			case 'SpreadElement':
				return l(_, new _ast.SpreadElement(fromExpression(_.argument)));
			case 'MemberExpression':
				return l(_, new _ast.MemberExpression(fromExpression(_.object), fromExpression(_.property), _.computed));
			case 'YieldExpression':
				return l(_, new _ast.YieldExpression(fromExpression(_.argument), _.delegate));
			case 'TemplateElement':
				return fromTemplateElement(_);
			case 'TemplateLiteral':
				return fromTemplateLiteral(_);
			case 'TaggedTemplateExpression':
				return l(_, new _ast.TaggedTemplateExpression(fromExpression(_.tag), fromTemplateLiteral(_.quasi)));
			case 'AssignmentProperty':
				assert(_.kind === 'init');
				assert(_.method === false);
				assert(_.shorthand === true);
				assert(_.computed === false);
				return fromAssignmentProperty(_);
			case 'ObjectPattern':
				return l(_, new _ast.ObjectPattern(_.properties.map(fromAssignmentProperty)));
			case 'ArrayPattern':
				return l(_, new _ast.ArrayPattern(_.elements.map(e => op(fromPattern, e))));
			case 'RestElement':
				return l(_, new _ast.RestElement(fromExpression(_.argument)));
			case 'MethodDefinition':
				return fromMethodDefinition(_);
			case 'ClassBody':
				return fromClassBody(_);
			case 'ClassDeclaration':
				return l(_, new _ast.ClassDeclaration(fromIdentifier(_.id), op(fromExpression, _.superClass), fromClassBody(_.body)));
			case 'ClassExpression':
				return l(_, new _ast.ClassExpression(op(fromIdentifier, _.id), op(fromExpression, _.superClass), fromClassBody(_.body)));
			case 'ImportDeclaration':
				return l(_, new _ast.ImportDeclaration(_.specifiers.map(fromImportSpecifierAbstract), fromLiteralString(_.source)));
			case 'ImportSpecifier':
				return l(_, new _ast.ImportSpecifier(fromIdentifier(_.imported), fromIdentifier(_.local)));
			case 'ImportDefaultSpecifier':
				return l(_, new _ast.ImportDefaultSpecifier(fromIdentifier(_.local)));
			case 'ImportNamespaceSpecifier':
				return l(_, new _ast.ImportNamespaceSpecifier(fromIdentifier(_.local)));
			case 'ExportSpeciifer':
				return fromExportSpecifier(_);
			case 'ExportNamedDeclaration':
				return l(_, new _ast.ExportNamedDeclaration(op(fromDeclaration, _.declaration), _.specifiers.map(fromExportSpecifier), op(fromLiteralString, _.source)));
			case 'ExportDefaultDeclaration':
				return l(_, new _ast.ExportDefaultDeclaration(fromExpressionOrDeclaration(_.declaration)));
			case 'ExportAllDeclaration':
				return l(_, new _ast.ExportAllDeclaration(fromLiteralString(_.source)));
			default:
				throw new Error(`Bad type: ${ _.type }`);
		}
	};
	module.exports = fromObj;

	const op = (fun, _) => _ == null ? null : fun(_),
	      l = (_, obj) => {
		if (_.loc) obj.loc = new _Loc2.default(new _Loc.Pos(_.loc.start.line, _.loc.start.column), new _Loc.Pos(_.loc.end.line, _.loc.end.column));
		return obj;
	};

	const fromIdentifier = _ => l(_, new _ast.Identifier(_.name)),
	      fromVariableDeclarator = _ => l(_, new _ast.VariableDeclarator(fromPattern(_.id), op(fromExpression, _.init))),
	      fromSwitchCase = _ => l(_, new _ast.SwitchCase(op(fromExpression, _.test), _.consequent.map(fromStatement))),
	      fromBlockStatement = _ => l(_, new _ast.BlockStatement(_.body.map(fromStatement))),
	      fromCatchClause = _ => l(_, new _ast.CatchClause(fromPattern(_.param), fromBlockStatement(_.body))),
	      fromTemplateElement = _ => l(_, new _ast.TemplateElement(_.tail, _.value)),
	      fromTemplateLiteral = _ => l(_, new _ast.TemplateLiteral(_.quasis.map(fromTemplateElement), _.expressions.map(fromExpression))),
	      fromAssignmentProperty = _ => l(_, new _ast.AssignmentProperty(fromIdentifier(_.key), fromPattern(_.value))),
	      fromProperty = _ => l(_, new _ast.Property(_.kind, fromIdentifierOrLiteral(_.key), fromExpression(_.value), _.method, _.shorthand, _.computed)),
	      fromMethodDefinition = _ => l(_, new _ast.MethodDefinition(fromIdentifierOrLiteral(_.key), fromFunctionExpression(_.value), _.kind, _.static, _.computed)),
	      fromClassBody = _ => l(_, new _ast.ClassBody(_.body.map(fromMethodDefinition))),
	      fromFunctionExpression = _ => l(_, new _ast.FunctionExpression(op(fromIdentifier, _.id), _.params.map(fromPattern), fromBlockStatement(_.body), _.generator)),
	      fromExportSpecifier = _ => l(_, new _ast.ExportSpecifier(fromIdentifier(_.exported), fromIdentifier(_.local)));

	const fromBlockStatementOrExpression = fromObj,
	      fromDeclaration = fromObj,
	      fromExpression = fromObj,
	      fromExpressionOrDeclaration = fromObj,
	      fromExpressionOrVariableDeclaration = fromObj,
	      fromIdentifierOrLiteral = fromObj,
	      fromImportSpecifierAbstract = fromObj,
	      fromLiteralString = fromObj,
	      fromPattern = fromObj,
	      fromStatement = fromObj;
});
//# sourceMappingURL=data:application/json;base64,