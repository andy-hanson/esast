if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	var assert = function assert(cond) {
		if (!cond) throw new Error('Assertion failed.');
	},
	    implementMany = function implementMany(holder, methodName, nameToImpl) {
		Object.keys(nameToImpl).forEach(function (name) {
			holder[name].prototype[methodName] = nameToImpl[name];
		});
	},
	    isEmpty = function isEmpty(arr) {
		return arr.length === 0;
	},
	    last = function last(arr) {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	    pAdd = function pAdd(obj, newName, newVal) {
		if (Object.prototype.hasOwnProperty.call(obj, newName)) throw new Error('Already has property ' + newName + ', have ' + Object.keys(obj));
		var _ = clone(obj);
		_[newName] = newVal;
		return _;
	},
	   

	// TODO: Support Sets and Unions
	type = function type(instance, itsType) {
		if (!itsType.prototype.isPrototypeOf(Object(instance))) throw new Error('' + instance + ' is not a ' + itsType + '.');
	},
	   

	// multi-line string literals like:
	// `
	//	a
	//		b
	//	c`
	// have too much indentation.
	// This will change it to "a\n\tb\nc" by detecting the first line's indentation.
	dedent = function dedent(str) {
		if (str[0] !== '\n') {
			return str;
		}str = str.slice(1);

		var indent = undefined;
		for (indent = 0; indent < str.length; indent = indent + 1) if (str[indent] !== '\t') break;

		var dedentedLines = str.split('\n').map(function (line) {
			return line.slice(indent);
		});
		return dedentedLines.join('\n');
	},
	   

	// TODO:ES6 Just use `new Set`
	newSet = function newSet(setMembers) {
		var set = new Set();
		setMembers.forEach(function (_) {
			return set.add(_);
		});
		return set;
	};

	exports.assert = assert;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.last = last;
	exports.pAdd = pAdd;
	exports.type = type;
	exports.dedent = dedent;
	exports.newSet = newSet;
	var clone = function clone(obj) {
		var nu = Object.create(Object.getPrototypeOf(obj));
		Object.getOwnPropertyNames(obj).forEach(function (name) {
			nu[name] = obj[name];
		});
		return nu;
	};
});
//# sourceMappingURL=data:application/json;base64,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O1NBS04sYUFBYSxHQUFiLGFBQWE7U0FNYixPQUFPLEdBQVAsT0FBTztTQUNQLElBQUksR0FBSixJQUFJO1NBS0osSUFBSSxHQUFKLElBQUk7U0FTSixJQUFJLEdBQUosSUFBSTtTQVlKLE1BQU0sR0FBTixNQUFNO1NBZ0JOLE1BQU0sR0FBTixNQUFNO0FBTVAsS0FBTSxLQUFLLEdBQUcsZUFBQSxHQUFHLEVBQUk7QUFDcEIsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDcEQsUUFBTSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUksRUFBSTtBQUMvQyxLQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0dBQ3BCLENBQUMsQ0FBQTtBQUNGLFNBQU8sRUFBRSxDQUFBO0VBQ1QsQ0FBQSIsImZpbGUiOiJwcml2YXRlL3V0aWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Rcblx0YXNzZXJ0ID0gY29uZCA9PiB7XG5cdFx0aWYgKCFjb25kKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBc3NlcnRpb24gZmFpbGVkLicpXG5cdH0sXG5cblx0aW1wbGVtZW50TWFueSA9IChob2xkZXIsIG1ldGhvZE5hbWUsIG5hbWVUb0ltcGwpID0+IHtcblx0XHRPYmplY3Qua2V5cyhuYW1lVG9JbXBsKS5mb3JFYWNoKG5hbWUgPT4ge1xuXHRcdFx0aG9sZGVyW25hbWVdLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IG5hbWVUb0ltcGxbbmFtZV1cblx0XHR9KVxuXHR9LFxuXG5cdGlzRW1wdHkgPSBhcnIgPT4gYXJyLmxlbmd0aCA9PT0gMCxcblx0bGFzdCA9IGFyciA9PiB7XG5cdFx0YXNzZXJ0KCFpc0VtcHR5KGFycikpXG5cdFx0cmV0dXJuIGFyclthcnIubGVuZ3RoIC0gMV1cblx0fSxcblxuXHRwQWRkID0gKG9iaiwgbmV3TmFtZSwgbmV3VmFsKSA9PiB7XG5cdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIG5ld05hbWUpKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBBbHJlYWR5IGhhcyBwcm9wZXJ0eSAke25ld05hbWV9LCBoYXZlICR7T2JqZWN0LmtleXMob2JqKX1gKVxuXHRcdGNvbnN0IF8gPSBjbG9uZShvYmopXG5cdFx0X1tuZXdOYW1lXSA9IG5ld1ZhbFxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0Ly8gVE9ETzogU3VwcG9ydCBTZXRzIGFuZCBVbmlvbnNcblx0dHlwZSA9IChpbnN0YW5jZSwgaXRzVHlwZSkgPT4ge1xuXHRcdGlmICghKGl0c1R5cGUucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoT2JqZWN0KGluc3RhbmNlKSkpKVxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGAke2luc3RhbmNlfSBpcyBub3QgYSAke2l0c1R5cGV9LmApXG5cdH0sXG5cblx0Ly8gbXVsdGktbGluZSBzdHJpbmcgbGl0ZXJhbHMgbGlrZTpcblx0Ly8gYFxuXHQvL1x0YVxuXHQvL1x0XHRiXG5cdC8vXHRjYFxuXHQvLyBoYXZlIHRvbyBtdWNoIGluZGVudGF0aW9uLlxuXHQvLyBUaGlzIHdpbGwgY2hhbmdlIGl0IHRvIFwiYVxcblxcdGJcXG5jXCIgYnkgZGV0ZWN0aW5nIHRoZSBmaXJzdCBsaW5lJ3MgaW5kZW50YXRpb24uXG5cdGRlZGVudCA9IHN0ciA9PiB7XG5cdFx0aWYgKHN0clswXSAhPT0gJ1xcbicpXG5cdFx0XHRyZXR1cm4gc3RyXG5cblx0XHRzdHIgPSBzdHIuc2xpY2UoMSlcblxuXHRcdGxldCBpbmRlbnRcblx0XHRmb3IgKGluZGVudCA9IDA7IGluZGVudCA8IHN0ci5sZW5ndGg7IGluZGVudCA9IGluZGVudCArIDEpXG5cdFx0XHRpZiAoc3RyW2luZGVudF0gIT09ICdcXHQnKVxuXHRcdFx0XHRicmVha1xuXG5cdFx0Y29uc3QgZGVkZW50ZWRMaW5lcyA9IHN0ci5zcGxpdCgnXFxuJykubWFwKGxpbmUgPT4gbGluZS5zbGljZShpbmRlbnQpKVxuXHRcdHJldHVybiBkZWRlbnRlZExpbmVzLmpvaW4oJ1xcbicpXG5cdH0sXG5cblx0Ly8gVE9ETzpFUzYgSnVzdCB1c2UgYG5ldyBTZXRgXG5cdG5ld1NldCA9IHNldE1lbWJlcnMgPT4ge1xuXHRcdGNvbnN0IHNldCA9IG5ldyBTZXQoKVxuXHRcdHNldE1lbWJlcnMuZm9yRWFjaChfID0+IHNldC5hZGQoXykpXG5cdFx0cmV0dXJuIHNldFxuXHR9XG5cbmNvbnN0IGNsb25lID0gb2JqID0+IHtcblx0Y29uc3QgbnUgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKVxuXHRPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmZvckVhY2gobmFtZSA9PiB7XG5cdFx0bnVbbmFtZV0gPSBvYmpbbmFtZV1cblx0fSlcblx0cmV0dXJuIG51XG59XG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==