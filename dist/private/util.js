if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	var assert = function assert(cond) {
		if (!cond) throw new Error('Assertion failed.');
	},
	    implementMany = function implementMany(holder, methodName, nameToImpl) {
		Object.keys(nameToImpl).forEach(function (name) {
			holder[name].prototype[methodName] = nameToImpl[name];
		});
	},
	    isEmpty = function isEmpty(arr) {
		return arr.length === 0;
	},
	    last = function last(arr) {
		assert(!isEmpty(arr));
		return arr[arr.length - 1];
	},
	    pAdd = function pAdd(obj, newName, newVal) {
		if (Object.prototype.hasOwnProperty.call(obj, newName)) throw new Error('Already has property ' + newName + ', have ' + Object.keys(obj));
		var _ = clone(obj);
		_[newName] = newVal;
		return _;
	},
	   

	// TODO: Support Sets and Unions
	type = function type(instance, itsType) {
		if (!itsType.prototype.isPrototypeOf(Object(instance))) throw new Error('' + instance + ' is not a ' + itsType + '.');
	},
	   

	// multi-line string literals like:
	// `
	//	a
	//		b
	//	c`
	// have too much indentation.
	// This will change it to "a\n\tb\nc" by detecting the first line's indentation.
	dedent = function dedent(str) {
		if (str[0] !== '\n') return str;

		str = str.slice(1);

		var indent = undefined;
		for (indent = 0; indent < str.length; indent = indent + 1) if (str[indent] !== '\t') break;

		var dedentedLines = str.split('\n').map(function (line) {
			return line.slice(indent);
		});
		return dedentedLines.join('\n');
	},
	   

	// TODO:ES6 Just use `new Set`
	newSet = function newSet(setMembers) {
		var set = new Set();
		setMembers.forEach(function (_) {
			return set.add(_);
		});
		return set;
	};

	exports.assert = assert;
	exports.implementMany = implementMany;
	exports.isEmpty = isEmpty;
	exports.last = last;
	exports.pAdd = pAdd;
	exports.type = type;
	exports.dedent = dedent;
	exports.newSet = newSet;
	var clone = function clone(obj) {
		var nu = Object.create(Object.getPrototypeOf(obj));
		Object.getOwnPropertyNames(obj).forEach(function (name) {
			nu[name] = obj[name];
		});
		return nu;
	};
});
//# sourceMappingURL=data:application/json;base64,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Q0FBQztHQUFBLENBQUMsQ0FBQTtBQUNuQyxTQUFPLEdBQUcsQ0FBQTtFQUNWLENBQUE7O1NBMURELE1BQU0sR0FBTixNQUFNO1NBS04sYUFBYSxHQUFiLGFBQWE7U0FNYixPQUFPLEdBQVAsT0FBTztTQUNQLElBQUksR0FBSixJQUFJO1NBS0osSUFBSSxHQUFKLElBQUk7U0FTSixJQUFJLEdBQUosSUFBSTtTQVlKLE1BQU0sR0FBTixNQUFNO1NBZ0JOLE1BQU0sR0FBTixNQUFNO0FBTVAsS0FBTSxLQUFLLEdBQUcsU0FBUixLQUFLLENBQUcsR0FBRyxFQUFJO0FBQ3BCLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO0FBQ3BELFFBQU0sQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxJQUFJLEVBQUk7QUFDL0MsS0FBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQTtHQUNwQixDQUFDLENBQUE7QUFDRixTQUFPLEVBQUUsQ0FBQTtFQUNULENBQUEiLCJmaWxlIjoicHJpdmF0ZS91dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0XG5cdGFzc2VydCA9IGNvbmQgPT4ge1xuXHRcdGlmICghY29uZClcblx0XHRcdHRocm93IG5ldyBFcnJvcignQXNzZXJ0aW9uIGZhaWxlZC4nKVxuXHR9LFxuXG5cdGltcGxlbWVudE1hbnkgPSAoaG9sZGVyLCBtZXRob2ROYW1lLCBuYW1lVG9JbXBsKSA9PiB7XG5cdFx0T2JqZWN0LmtleXMobmFtZVRvSW1wbCkuZm9yRWFjaChuYW1lID0+IHtcblx0XHRcdGhvbGRlcltuYW1lXS5wcm90b3R5cGVbbWV0aG9kTmFtZV0gPSBuYW1lVG9JbXBsW25hbWVdXG5cdFx0fSlcblx0fSxcblxuXHRpc0VtcHR5ID0gYXJyID0+IGFyci5sZW5ndGggPT09IDAsXG5cdGxhc3QgPSBhcnIgPT4ge1xuXHRcdGFzc2VydCghaXNFbXB0eShhcnIpKVxuXHRcdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdXG5cdH0sXG5cblx0cEFkZCA9IChvYmosIG5ld05hbWUsIG5ld1ZhbCkgPT4ge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBuZXdOYW1lKSlcblx0XHRcdHRocm93IG5ldyBFcnJvcihgQWxyZWFkeSBoYXMgcHJvcGVydHkgJHtuZXdOYW1lfSwgaGF2ZSAke09iamVjdC5rZXlzKG9iail9YClcblx0XHRjb25zdCBfID0gY2xvbmUob2JqKVxuXHRcdF9bbmV3TmFtZV0gPSBuZXdWYWxcblx0XHRyZXR1cm4gX1xuXHR9LFxuXG5cdC8vIFRPRE86IFN1cHBvcnQgU2V0cyBhbmQgVW5pb25zXG5cdHR5cGUgPSAoaW5zdGFuY2UsIGl0c1R5cGUpID0+IHtcblx0XHRpZiAoIShpdHNUeXBlLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKE9iamVjdChpbnN0YW5jZSkpKSlcblx0XHRcdHRocm93IG5ldyBFcnJvcihgJHtpbnN0YW5jZX0gaXMgbm90IGEgJHtpdHNUeXBlfS5gKVxuXHR9LFxuXG5cdC8vIG11bHRpLWxpbmUgc3RyaW5nIGxpdGVyYWxzIGxpa2U6XG5cdC8vIGBcblx0Ly9cdGFcblx0Ly9cdFx0YlxuXHQvL1x0Y2Bcblx0Ly8gaGF2ZSB0b28gbXVjaCBpbmRlbnRhdGlvbi5cblx0Ly8gVGhpcyB3aWxsIGNoYW5nZSBpdCB0byBcImFcXG5cXHRiXFxuY1wiIGJ5IGRldGVjdGluZyB0aGUgZmlyc3QgbGluZSdzIGluZGVudGF0aW9uLlxuXHRkZWRlbnQgPSBzdHIgPT4ge1xuXHRcdGlmIChzdHJbMF0gIT09ICdcXG4nKVxuXHRcdFx0cmV0dXJuIHN0clxuXG5cdFx0c3RyID0gc3RyLnNsaWNlKDEpXG5cblx0XHRsZXQgaW5kZW50XG5cdFx0Zm9yIChpbmRlbnQgPSAwOyBpbmRlbnQgPCBzdHIubGVuZ3RoOyBpbmRlbnQgPSBpbmRlbnQgKyAxKVxuXHRcdFx0aWYgKHN0cltpbmRlbnRdICE9PSAnXFx0Jylcblx0XHRcdFx0YnJlYWtcblxuXHRcdGNvbnN0IGRlZGVudGVkTGluZXMgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChsaW5lID0+IGxpbmUuc2xpY2UoaW5kZW50KSlcblx0XHRyZXR1cm4gZGVkZW50ZWRMaW5lcy5qb2luKCdcXG4nKVxuXHR9LFxuXG5cdC8vIFRPRE86RVM2IEp1c3QgdXNlIGBuZXcgU2V0YFxuXHRuZXdTZXQgPSBzZXRNZW1iZXJzID0+IHtcblx0XHRjb25zdCBzZXQgPSBuZXcgU2V0KClcblx0XHRzZXRNZW1iZXJzLmZvckVhY2goXyA9PiBzZXQuYWRkKF8pKVxuXHRcdHJldHVybiBzZXRcblx0fVxuXG5jb25zdCBjbG9uZSA9IG9iaiA9PiB7XG5cdGNvbnN0IG51ID0gT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2Yob2JqKSlcblx0T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5mb3JFYWNoKG5hbWUgPT4ge1xuXHRcdG51W25hbWVdID0gb2JqW25hbWVdXG5cdH0pXG5cdHJldHVybiBudVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc3JjIn0=