{"version":3,"sources":["private/tuple.js"],"names":[],"mappings":"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","file":"private/tuple.js","sourcesContent":["import { assert, pAdd } from './util'\n\nexport default (name, superType, doc, namesTypes, protoProps = { }) => {\n\tlet props = [ ]\n\tassert(namesTypes.length % 2 === 0)\n\tfor (let i = 0; i < namesTypes.length; i = i + 2)\n\t\tprops.push({ name: namesTypes[i], type: namesTypes[i + 1] })\n\tlet args = props.map(_ => _.name).join(', ')\n\n\tlet body = `return function ${name}(${args}) {\n\tif (!(this instanceof ${name}))\n\t\treturn new ${name}(${args});\n`\n\n\tprops.forEach(({ name }) => {\n\t\tbody = body +\n\t\t\t`this.${name} = ${name}; if (this.${name} === undefined) this.${name} = null;\\n\\t`\n\t})\n\tbody = body + 'this.postConstruct()\\n}'\n\tconst type = Function(body)()\n\tconst prototypeDefaults = {\n\t\tconstructor: type,\n\t\t// Default is to do nothing. May be overridden.\n\t\tpostConstruct() { },\n\t\ttoJSON() {\n\t\t\tconst obj = { }\n\t\t\tobj.type = this.type\n\t\t\t// Sort to make JSON rendering deterministic.\n\t\t\tObject.keys(this).sort().forEach(key => { obj[key] = this[key] })\n\t\t\treturn obj\n\t\t},\n\t\t// Don't use JSON.stringify because we want other things below this to use their toString().\n\t\ttoString() { return inspect(this) }\n\t}\n\tconst prototype = Object.assign(\n\t\tObject.create(superType.prototype),\n\t\tprototypeDefaults,\n\t\tprotoProps)\n\treturn Object.assign(type, {\n\t\tdoc,\n\t\tprops,\n\t\tprototype,\n\t\ttoString() { return this.name }\n\t})\n}\n\nexport const abstract = (name, superType, doc) => {\n\tconst type = Function(\n\t\t`return function ${name}() { throw new Error(\"${name} is an abstract type.\") }`\n\t\t)()\n\treturn Object.assign(type, {\n\t\tdoc,\n\t\tprototype: Object.create(superType.prototype),\n\t\ttoString() { return name }\n\t})\n}\n\nconst show = _ => {\n\tif (_ instanceof Array) {\n\t\tconst parts = _.map(em => indent(show(em))).join(',\\n\\t')\n\t\treturn `[\\n\\t${parts}\\n]`\n\t} else if (_ === null)\n\t\treturn 'null'\n\telse if (typeof _ === 'string')\n\t\treturn `\"${_}\"`\n\telse\n\t\treturn _.toString()\n}\n\nconst inspect = obj => {\n\tconst type = obj.constructor\n\tconst props = type.props.map(({ name }) => '\\n\\t' + indent(show(obj[name]))).join(',')\n\tconst loc = obj.loc === undefined ? '' : `@${obj.loc}`\n\treturn `${type}${loc}(${props})`\n}\n\n/*\nconst inspect = obj => {\n\tconst keys = Object.keys(obj).sort()\n\tkeys.unshift('type')\n\tconst props = keys\n\t\t.map(key => `${key}: ${indent(show(obj[key]))}`)\n\t\t.join(',\\n\\t')\n\treturn `{\\n\\t${props}\\n}`\n}\n*/\nconst indent = str => str.replace(/\\n/g, '\\n\\t')\n"],"sourceRoot":"/src"}