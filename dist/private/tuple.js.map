{"version":3,"sources":["private/tuple.js"],"names":[],"mappings":";;;kBAEe,UAAC,IAAI,EAAE,SAAS,EAAoB;oCAAf,UAAU;AAAV,aAAU;;;AAC7C,MAAI,KAAK,GAAG,EAAE,CAAA;AACd,QAJQ,MAAM,CAIP,UAAU,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAA;AACnC,OAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC;AAC/C,QAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;GAAA,AAC1B,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;;AAE3B,MAAI,IAAI,wBAAsB,IAAI,SAAI,IAAI,qCAClB,IAAI,2BACd,IAAI,SAAI,IAAI,SAC1B,CAAA;AACA,OAAK,CAAC,OAAO,CAAC,UAAA,IAAI,EAAI;AACrB,OAAI,GAAG,IAAI,cAAW,IAAI,WAAM,IAAI,WAAO,CAAA;GAC3C,CAAC,CAAA;AACF,MAAI,GAAG,IAAI,GAAG,GAAG,CAAA;AACjB,MAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAA;AAC5B,KAAG,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;AACjE,cAAW,EAAE,GAAG;AAChB,WAAQ,EAAA,oBAAG;AAAE,WAAO,OAAO,CAAC,IAAI,CAAC,CAAA;IAAE;GACnC,CAAC,CAAA;AACF,SAAO,GAAG,CAAA;EACV;;AAED,KAAM,OAAO,GAAG,iBAAA,CAAC,EAAI;AACpB,MAAM,QAAQ,GAAG,kBAAA,GAAG;UAAI,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;GAAA,CAAA;;AAElD,MAAI,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,IAAI,CAAC,CAAC,WAAW,CAAC,IAAI,CAAA,GAAI,IAAI,CAAA;AAChE,QAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG,EAAI;AAC7B,OAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,CAAA;AAClB,OAAM,GAAG,GAAG,GAAG,YAAY,KAAK,GAAG,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAA;AACnE,IAAC,GAAG,CAAC,aAAU,GAAG,UAAK,QAAQ,CAAC,GAAG,CAAC,CAAE,CAAA;GACtC,CAAC,CAAA;AACF,SAAO,CAAC,GAAG,KAAK,CAAA;EAChB,CAAA","file":"private/tuple.js","sourcesContent":["import { assert } from './util'\n\nexport default (name, superType, ...namesTypes) => {\n\tlet names = []\n\tassert(namesTypes.length % 2 === 0)\n\tfor (let i = 0; i < namesTypes.length; i = i + 2)\n\t\tnames.push(namesTypes[i])\n\tlet args = names.join(', ')\n\n\tlet body = `return function ${name}(${args}) {\n\tif (!(this instanceof ${name}))\n\t\treturn new ${name}(${args});\n`\n\tnames.forEach(name => {\n\t\tbody = body + `this.${name} = ${name};\\n\\t`\n\t})\n\tbody = body + '}'\n\tconst ctr = Function(body)()\n\tctr.prototype = Object.assign(Object.create(superType.prototype), {\n\t\tconstructor: ctr,\n\t\ttoString() { return inspect(this) }\n\t})\n\treturn ctr\n}\n\nconst inspect = _ => {\n\tconst indented = str => str.replace(/\\n/g, '\\n\\t')\n\n\tlet s = (_.constructor.displayName || _.constructor.name) + ' {'\n\tObject.keys(_).forEach(key => {\n\t\tconst val = _[key]\n\t\tconst str = val instanceof Array ? val.join(',\\n') : val.toString()\n\t\ts = s + `\\n\\t${key}: ${indented(str)}`\n\t})\n\treturn s + '\\n}'\n}\n"],"sourceRoot":"/src"}