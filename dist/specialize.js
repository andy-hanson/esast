if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'tupl/dist/tupl', './ast', './private/util'], function (exports, _tuplDistTupl, _ast, _privateUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _tupl = _interopRequire(_tuplDistTupl);

	var s = function s(superType, namesTypes, protoProps) {
		return (0, _tupl)('' + superType.name + 'Specialization', superType, 'specialization of ' + superType, namesTypes, protoProps);
	};
	exports['default'] = s;
	var assignmentExpressionPlain = s(_ast.AssignmentExpression, ['left', _ast.Pattern, 'right', _ast.Expression], { operator: '=' }),
	    callExpressionThunk = s(_ast.CallExpression, ['callee', _ast.Expression], { arguments: [] }),
	    functionExpressionPlain = function functionExpressionPlain(params, body, generator) {
		return (generator ? FunctionExpressionPlainGenerator : FunctionExpressionPlain)(params, body);
	},
	    functionExpressionThunk = function functionExpressionThunk(body, generator) {
		return (generator ? FunctionExpressionThunkGenerator : FunctionExpressionThunk)(body);
	},
	    variableDeclarationConst = s(_ast.VariableDeclaration, ['declarations', [_ast.VariableDeclarator]], { kind: 'const' }),
	    property = function property(kind, key, value) {
		if (kind === 'init') return PropertyInit(key, value);else {
			(0, _privateUtil.assert)(kind === 'get');
			return PropertyGet(key, value);
		}
	},
	    memberExpression = function memberExpression(object, property) {
		return property.type === 'Identifier' ? MemberExpressionIdentifier(object, property) : MemberExpressionComputed(object, property);
	},
	    yieldExpressionNoDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: false }),
	    yieldExpressionDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: true });

	exports.assignmentExpressionPlain = assignmentExpressionPlain;
	exports.callExpressionThunk = callExpressionThunk;
	exports.functionExpressionPlain = functionExpressionPlain;
	exports.functionExpressionThunk = functionExpressionThunk;
	exports.variableDeclarationConst = variableDeclarationConst;
	exports.property = property;
	exports.memberExpression = memberExpression;
	exports.yieldExpressionNoDelegate = yieldExpressionNoDelegate;
	exports.yieldExpressionDelegate = yieldExpressionDelegate;
	var FunctionExpressionPlain = s(_ast.FunctionExpression, ['params', [_ast.Identifier], 'body', _ast.BlockStatement], { id: null, generator: false }),
	    FunctionExpressionPlainGenerator = s(_ast.FunctionExpression, ['params', [_ast.Identifier], 'body', _ast.BlockStatement], { id: null, generator: true }),
	    FunctionExpressionThunk = s(_ast.FunctionExpression, ['body', _ast.BlockStatement], { id: null, params: [], generator: false }),
	    FunctionExpressionThunkGenerator = s(_ast.FunctionExpression, ['body', _ast.BlockStatement], { id: null, params: [], generator: true }),
	    PropertyInit = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'init' }),
	    PropertyGet = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'get' }),
	    MemberExpressionComputed = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Expression], { computed: true }),
	    MemberExpressionIdentifier = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Literal], { computed: false });
});
//# sourceMappingURL=data:application/json;base64,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RSxDQUFDO0tBQ3BCLDBCQUEwQixHQUFHLENBQUMsTUEzRVQsZ0JBQWdCLEVBNEVwQyxDQUFFLFFBQVEsT0E3RW1ELFVBQVUsRUE2RS9DLFVBQVUsT0E1RXZCLE9BQU8sQ0E0RTJCLEVBQzdDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUEiLCJmaWxlIjoic3BlY2lhbGl6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0dXBsIGZyb20gJ3R1cGwvZGlzdC90dXBsJ1xuaW1wb3J0IHsgQXNzaWdubWVudEV4cHJlc3Npb24sIEJsb2NrU3RhdGVtZW50LCBDYWxsRXhwcmVzc2lvbiwgRXhwcmVzc2lvbiwgRnVuY3Rpb25FeHByZXNzaW9uLFxuXHRJZGVudGlmaWVyLCBMaXRlcmFsLCBNZW1iZXJFeHByZXNzaW9uLCBQYXR0ZXJuLCBQcm9wZXJ0eSwgVmFyaWFibGVEZWNsYXJhdGlvbixcblx0VmFyaWFibGVEZWNsYXJhdG9yLCBZaWVsZEV4cHJlc3Npb24gfSBmcm9tICcuL2FzdCdcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gJy4vcHJpdmF0ZS91dGlsJ1xuXG5jb25zdCBzID0gKHN1cGVyVHlwZSwgbmFtZXNUeXBlcywgcHJvdG9Qcm9wcykgPT4gdHVwbChcblx0YCR7c3VwZXJUeXBlLm5hbWV9U3BlY2lhbGl6YXRpb25gLFxuXHRzdXBlclR5cGUsXG5cdGBzcGVjaWFsaXphdGlvbiBvZiAke3N1cGVyVHlwZX1gLFxuXHRuYW1lc1R5cGVzLFxuXHRwcm90b1Byb3BzKVxuZXhwb3J0IGRlZmF1bHQgc1xuXG5leHBvcnQgY29uc3Rcblx0YXNzaWdubWVudEV4cHJlc3Npb25QbGFpbiA9IHMoQXNzaWdubWVudEV4cHJlc3Npb24sXG5cdFx0WyAnbGVmdCcsIFBhdHRlcm4sICdyaWdodCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IG9wZXJhdG9yOiAnPScgfSksXG5cblx0Y2FsbEV4cHJlc3Npb25UaHVuayA9IHMoQ2FsbEV4cHJlc3Npb24sXG5cdFx0WyAnY2FsbGVlJywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgYXJndW1lbnRzOiBbXSB9KSxcblxuXHRmdW5jdGlvbkV4cHJlc3Npb25QbGFpbiA9IChwYXJhbXMsIGJvZHksIGdlbmVyYXRvcikgPT5cblx0XHQoZ2VuZXJhdG9yID8gRnVuY3Rpb25FeHByZXNzaW9uUGxhaW5HZW5lcmF0b3IgOiBGdW5jdGlvbkV4cHJlc3Npb25QbGFpbikocGFyYW1zLCBib2R5KSxcblxuXHRmdW5jdGlvbkV4cHJlc3Npb25UaHVuayA9IChib2R5LCBnZW5lcmF0b3IpID0+XG5cdFx0KGdlbmVyYXRvciA/IEZ1bmN0aW9uRXhwcmVzc2lvblRodW5rR2VuZXJhdG9yIDogRnVuY3Rpb25FeHByZXNzaW9uVGh1bmspKGJvZHkpLFxuXG5cdHZhcmlhYmxlRGVjbGFyYXRpb25Db25zdCA9IHMoVmFyaWFibGVEZWNsYXJhdGlvbixcblx0XHRbICdkZWNsYXJhdGlvbnMnLCBbVmFyaWFibGVEZWNsYXJhdG9yXSBdLFxuXHRcdHsga2luZDogJ2NvbnN0JyB9KSxcblxuXHRwcm9wZXJ0eSA9IChraW5kLCBrZXksIHZhbHVlKSA9PiB7XG5cdFx0aWYgKGtpbmQgPT09ICdpbml0Jylcblx0XHRcdHJldHVybiBQcm9wZXJ0eUluaXQoa2V5LCB2YWx1ZSlcblx0XHRlbHNlIHtcblx0XHRcdGFzc2VydChraW5kID09PSAnZ2V0Jylcblx0XHRcdHJldHVybiBQcm9wZXJ0eUdldChrZXksIHZhbHVlKVxuXHRcdH1cblx0fSxcblxuXHRtZW1iZXJFeHByZXNzaW9uID0gKG9iamVjdCwgcHJvcGVydHkpID0+XG5cdFx0cHJvcGVydHkudHlwZSA9PT0gJ0lkZW50aWZpZXInID9cblx0XHRcdE1lbWJlckV4cHJlc3Npb25JZGVudGlmaWVyKG9iamVjdCwgcHJvcGVydHkpIDpcblx0XHRcdE1lbWJlckV4cHJlc3Npb25Db21wdXRlZChvYmplY3QsIHByb3BlcnR5KSxcblxuXHR5aWVsZEV4cHJlc3Npb25Ob0RlbGVnYXRlID0gcyhZaWVsZEV4cHJlc3Npb24sXG5cdFx0WyAnYXJndW1lbnQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBkZWxlZ2F0ZTogZmFsc2UgfSksXG5cblx0eWllbGRFeHByZXNzaW9uRGVsZWdhdGUgPSBzKFlpZWxkRXhwcmVzc2lvbixcblx0XHRbICdhcmd1bWVudCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IGRlbGVnYXRlOiB0cnVlIH0pXG5cbmNvbnN0XG5cdEZ1bmN0aW9uRXhwcmVzc2lvblBsYWluID0gcyhGdW5jdGlvbkV4cHJlc3Npb24sXG5cdFx0WyAncGFyYW1zJywgW0lkZW50aWZpZXJdLCAnYm9keScsIEJsb2NrU3RhdGVtZW50IF0sXG5cdFx0eyBpZDogbnVsbCwgZ2VuZXJhdG9yOiBmYWxzZSB9KSxcblx0RnVuY3Rpb25FeHByZXNzaW9uUGxhaW5HZW5lcmF0b3IgPSBzKEZ1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdwYXJhbXMnLCBbSWRlbnRpZmllcl0sICdib2R5JywgQmxvY2tTdGF0ZW1lbnQgXSxcblx0XHR7IGlkOiBudWxsLCBnZW5lcmF0b3I6IHRydWUgfSksXG5cdEZ1bmN0aW9uRXhwcmVzc2lvblRodW5rID0gcyhGdW5jdGlvbkV4cHJlc3Npb24sXG5cdFx0WyAnYm9keScsIEJsb2NrU3RhdGVtZW50IF0sXG5cdFx0eyBpZDogbnVsbCwgcGFyYW1zOiBbXSwgZ2VuZXJhdG9yOiBmYWxzZSB9KSxcblx0RnVuY3Rpb25FeHByZXNzaW9uVGh1bmtHZW5lcmF0b3IgPSBzKEZ1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdib2R5JywgQmxvY2tTdGF0ZW1lbnQgXSxcblx0XHR7IGlkOiBudWxsLCBwYXJhbXM6IFtdLCBnZW5lcmF0b3I6IHRydWUgfSksXG5cdFByb3BlcnR5SW5pdCA9IHMoUHJvcGVydHksXG5cdFx0WyAna2V5JywgRXhwcmVzc2lvbiwgJ3ZhbHVlJywgRXhwcmVzc2lvbiBdLFxuXHRcdHsga2luZDogJ2luaXQnIH0pLFxuXHRQcm9wZXJ0eUdldCA9IHMoUHJvcGVydHksXG5cdFx0WyAna2V5JywgRXhwcmVzc2lvbiwgJ3ZhbHVlJywgRXhwcmVzc2lvbiBdLFxuXHRcdHsga2luZDogJ2dldCcgfSksXG5cdE1lbWJlckV4cHJlc3Npb25Db21wdXRlZCA9IHMoTWVtYmVyRXhwcmVzc2lvbixcblx0XHRbICdvYmplY3QnLCBFeHByZXNzaW9uLCAncHJvcGVydHknLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBjb21wdXRlZDogdHJ1ZSB9KSxcblx0TWVtYmVyRXhwcmVzc2lvbklkZW50aWZpZXIgPSBzKE1lbWJlckV4cHJlc3Npb24sXG5cdFx0WyAnb2JqZWN0JywgRXhwcmVzc2lvbiwgJ3Byb3BlcnR5JywgTGl0ZXJhbCBdLFxuXHRcdHsgY29tcHV0ZWQ6IGZhbHNlIH0pXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==