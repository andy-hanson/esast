if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'tupl/dist/tupl', './ast', './private/util'], function (exports, _tuplDistTupl, _ast, _privateUtil) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _tupl = _interopRequire(_tuplDistTupl);

	var s = function s(superType, namesTypes, protoProps) {
		return _tupl('' + superType.name + 'Specialization', superType, 'specialization of ' + superType, namesTypes, protoProps);
	};
	exports['default'] = s;
	var assignmentExpressionPlain = s(_ast.AssignmentExpression, ['left', _ast.Pattern, 'right', _ast.Expression], { operator: '=' }),
	    callExpressionThunk = s(_ast.CallExpression, ['callee', _ast.Expression], { arguments: [] }),
	    functionExpressionPlain = function functionExpressionPlain(params, body, generator) {
		return (generator ? FunctionExpressionPlainGenerator : FunctionExpressionPlain)(params, body);
	},
	    functionExpressionThunk = function functionExpressionThunk(body, generator) {
		return (generator ? FunctionExpressionThunkGenerator : FunctionExpressionThunk)(body);
	},
	    variableDeclarationConst = s(_ast.VariableDeclaration, ['declarations', [_ast.VariableDeclarator]], { kind: 'const' }),
	    property = function property(kind, key, value) {
		if (kind === 'init') {
			return PropertyInit(key, value);
		} else {
			_privateUtil.assert(kind === 'get');
			return PropertyGet(key, value);
		}
	},
	    memberExpression = function memberExpression(object, property) {
		return property.type === 'Identifier' ? MemberExpressionIdentifier(object, property) : MemberExpressionComputed(object, property);
	},
	    yieldExpressionNoDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: false }),
	    yieldExpressionDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: true });

	exports.assignmentExpressionPlain = assignmentExpressionPlain;
	exports.callExpressionThunk = callExpressionThunk;
	exports.functionExpressionPlain = functionExpressionPlain;
	exports.functionExpressionThunk = functionExpressionThunk;
	exports.variableDeclarationConst = variableDeclarationConst;
	exports.property = property;
	exports.memberExpression = memberExpression;
	exports.yieldExpressionNoDelegate = yieldExpressionNoDelegate;
	exports.yieldExpressionDelegate = yieldExpressionDelegate;
	var FunctionExpressionPlain = s(_ast.FunctionExpression, ['params', [_ast.Identifier], 'body', _ast.BlockStatement], { id: null, generator: false }),
	    FunctionExpressionPlainGenerator = s(_ast.FunctionExpression, ['params', [_ast.Identifier], 'body', _ast.BlockStatement], { id: null, generator: true }),
	    FunctionExpressionThunk = s(_ast.FunctionExpression, ['body', _ast.BlockStatement], { id: null, params: [], generator: false }),
	    FunctionExpressionThunkGenerator = s(_ast.FunctionExpression, ['body', _ast.BlockStatement], { id: null, params: [], generator: true }),
	    PropertyInit = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'init' }),
	    PropertyGet = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'get' }),
	    MemberExpressionComputed = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Expression], { computed: true }),
	    MemberExpressionIdentifier = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Literal], { computed: false });
});
//# sourceMappingURL=data:application/json;base64,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RSxRQUFRLE9BOUVxRSxVQUFVLEVBOEVqRSxVQUFVLE9BN0VILE9BQU8sQ0E2RU8sRUFDN0MsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQSIsImZpbGUiOiJzcGVjaWFsaXplLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR1cGwgZnJvbSAndHVwbC9kaXN0L3R1cGwnXG5pbXBvcnQgeyBBc3NpZ25tZW50RXhwcmVzc2lvbiwgQmluYXJ5RXhwcmVzc2lvbiwgQmxvY2tTdGF0ZW1lbnQsIENhbGxFeHByZXNzaW9uLCBFeHByZXNzaW9uLFxuXHRGdW5jdGlvbkV4cHJlc3Npb24sIElkZW50aWZpZXIsIExpdGVyYWwsIE1lbWJlckV4cHJlc3Npb24sIFBhdHRlcm4sIFByb3BlcnR5LCBSZXR1cm5TdGF0ZW1lbnQsXG5cdFN0YXRlbWVudCwgU3dpdGNoQ2FzZSwgU3dpdGNoU3RhdGVtZW50LCBZaWVsZEV4cHJlc3Npb24sIFVuYXJ5RXhwcmVzc2lvbiwgVmFyaWFibGVEZWNsYXJhdGlvbixcblx0VmFyaWFibGVEZWNsYXJhdG9yLCBXaGlsZVN0YXRlbWVudCB9IGZyb20gJy4vYXN0J1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi9wcml2YXRlL3V0aWwnXG5cbmNvbnN0IHMgPSAoc3VwZXJUeXBlLCBuYW1lc1R5cGVzLCBwcm90b1Byb3BzKSA9PiB0dXBsKFxuXHRgJHtzdXBlclR5cGUubmFtZX1TcGVjaWFsaXphdGlvbmAsXG5cdHN1cGVyVHlwZSxcblx0YHNwZWNpYWxpemF0aW9uIG9mICR7c3VwZXJUeXBlfWAsXG5cdG5hbWVzVHlwZXMsXG5cdHByb3RvUHJvcHMpXG5leHBvcnQgZGVmYXVsdCBzXG5cbmV4cG9ydCBjb25zdFxuXHRhc3NpZ25tZW50RXhwcmVzc2lvblBsYWluID0gcyhBc3NpZ25tZW50RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgUGF0dGVybiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICc9JyB9KSxcblxuXHRjYWxsRXhwcmVzc2lvblRodW5rID0gcyhDYWxsRXhwcmVzc2lvbixcblx0XHRbICdjYWxsZWUnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBhcmd1bWVudHM6IFtdIH0pLFxuXG5cdGZ1bmN0aW9uRXhwcmVzc2lvblBsYWluID0gKHBhcmFtcywgYm9keSwgZ2VuZXJhdG9yKSA9PlxuXHRcdChnZW5lcmF0b3IgPyBGdW5jdGlvbkV4cHJlc3Npb25QbGFpbkdlbmVyYXRvciA6IEZ1bmN0aW9uRXhwcmVzc2lvblBsYWluKShwYXJhbXMsIGJvZHkpLFxuXG5cdGZ1bmN0aW9uRXhwcmVzc2lvblRodW5rID0gKGJvZHksIGdlbmVyYXRvcikgPT5cblx0XHQoZ2VuZXJhdG9yID8gRnVuY3Rpb25FeHByZXNzaW9uVGh1bmtHZW5lcmF0b3IgOiBGdW5jdGlvbkV4cHJlc3Npb25UaHVuaykoYm9keSksXG5cblx0dmFyaWFibGVEZWNsYXJhdGlvbkNvbnN0ID0gcyhWYXJpYWJsZURlY2xhcmF0aW9uLFxuXHRcdFsgJ2RlY2xhcmF0aW9ucycsIFtWYXJpYWJsZURlY2xhcmF0b3JdIF0sXG5cdFx0eyBraW5kOiAnY29uc3QnIH0pLFxuXG5cdHByb3BlcnR5ID0gKGtpbmQsIGtleSwgdmFsdWUpID0+IHtcblx0XHRpZiAoa2luZCA9PT0gJ2luaXQnKVxuXHRcdFx0cmV0dXJuIFByb3BlcnR5SW5pdChrZXksIHZhbHVlKVxuXHRcdGVsc2Uge1xuXHRcdFx0YXNzZXJ0KGtpbmQgPT09ICdnZXQnKVxuXHRcdFx0cmV0dXJuIFByb3BlcnR5R2V0KGtleSwgdmFsdWUpXG5cdFx0fVxuXHR9LFxuXG5cdG1lbWJlckV4cHJlc3Npb24gPSAob2JqZWN0LCBwcm9wZXJ0eSkgPT5cblx0XHRwcm9wZXJ0eS50eXBlID09PSAnSWRlbnRpZmllcicgP1xuXHRcdFx0TWVtYmVyRXhwcmVzc2lvbklkZW50aWZpZXIob2JqZWN0LCBwcm9wZXJ0eSkgOlxuXHRcdFx0TWVtYmVyRXhwcmVzc2lvbkNvbXB1dGVkKG9iamVjdCwgcHJvcGVydHkpLFxuXG5cdHlpZWxkRXhwcmVzc2lvbk5vRGVsZWdhdGUgPSBzKFlpZWxkRXhwcmVzc2lvbixcblx0XHRbICdhcmd1bWVudCcsIEV4cHJlc3Npb24gXSxcblx0XHR7IGRlbGVnYXRlOiBmYWxzZSB9KSxcblxuXHR5aWVsZEV4cHJlc3Npb25EZWxlZ2F0ZSA9IHMoWWllbGRFeHByZXNzaW9uLFxuXHRcdFsgJ2FyZ3VtZW50JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgZGVsZWdhdGU6IHRydWUgfSlcblxuY29uc3Rcblx0RnVuY3Rpb25FeHByZXNzaW9uUGxhaW4gPSBzKEZ1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdwYXJhbXMnLCBbSWRlbnRpZmllcl0sICdib2R5JywgQmxvY2tTdGF0ZW1lbnQgXSxcblx0XHR7IGlkOiBudWxsLCBnZW5lcmF0b3I6IGZhbHNlIH0pLFxuXHRGdW5jdGlvbkV4cHJlc3Npb25QbGFpbkdlbmVyYXRvciA9IHMoRnVuY3Rpb25FeHByZXNzaW9uLFxuXHRcdFsgJ3BhcmFtcycsIFtJZGVudGlmaWVyXSwgJ2JvZHknLCBCbG9ja1N0YXRlbWVudCBdLFxuXHRcdHsgaWQ6IG51bGwsIGdlbmVyYXRvcjogdHJ1ZSB9KSxcblx0RnVuY3Rpb25FeHByZXNzaW9uVGh1bmsgPSBzKEZ1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdib2R5JywgQmxvY2tTdGF0ZW1lbnQgXSxcblx0XHR7IGlkOiBudWxsLCBwYXJhbXM6IFtdLCBnZW5lcmF0b3I6IGZhbHNlIH0pLFxuXHRGdW5jdGlvbkV4cHJlc3Npb25UaHVua0dlbmVyYXRvciA9IHMoRnVuY3Rpb25FeHByZXNzaW9uLFxuXHRcdFsgJ2JvZHknLCBCbG9ja1N0YXRlbWVudCBdLFxuXHRcdHsgaWQ6IG51bGwsIHBhcmFtczogW10sIGdlbmVyYXRvcjogdHJ1ZSB9KSxcblx0UHJvcGVydHlJbml0ID0gcyhQcm9wZXJ0eSxcblx0XHRbICdrZXknLCBFeHByZXNzaW9uLCAndmFsdWUnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBraW5kOiAnaW5pdCcgfSksXG5cdFByb3BlcnR5R2V0ID0gcyhQcm9wZXJ0eSxcblx0XHRbICdrZXknLCBFeHByZXNzaW9uLCAndmFsdWUnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBraW5kOiAnZ2V0JyB9KSxcblx0TWVtYmVyRXhwcmVzc2lvbkNvbXB1dGVkID0gcyhNZW1iZXJFeHByZXNzaW9uLFxuXHRcdFsgJ29iamVjdCcsIEV4cHJlc3Npb24sICdwcm9wZXJ0eScsIEV4cHJlc3Npb24gXSxcblx0XHR7IGNvbXB1dGVkOiB0cnVlIH0pLFxuXHRNZW1iZXJFeHByZXNzaW9uSWRlbnRpZmllciA9IHMoTWVtYmVyRXhwcmVzc2lvbixcblx0XHRbICdvYmplY3QnLCBFeHByZXNzaW9uLCAncHJvcGVydHknLCBMaXRlcmFsIF0sXG5cdFx0eyBjb21wdXRlZDogZmFsc2UgfSlcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9