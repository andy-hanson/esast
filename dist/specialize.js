if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', 'tupl/dist/tupl', 'tupl/dist/type', './ast', './private/util'], function (exports, _tuplDistTupl, _tuplDistType, _ast, _privateUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _tupl = _interopRequireDefault(_tuplDistTupl);

	const s = (superType, namesTypes, protoProps) => (0, _tupl.default)(`${ superType.name }Specialization`, superType, `specialization of ${ superType }`, namesTypes, protoProps);
	exports.default = s;
	const assignmentExpressionPlain = s(_ast.AssignmentExpression, ['left', _ast.Pattern, 'right', _ast.Expression], { operator: '=' }),
	      callExpressionThunk = s(_ast.CallExpression, ['callee', _ast.Expression], { arguments: [] }),
	      functionExpressionThunk = (body, generator) => (generator ? FunctionExpressionThunkGenerator : ArrowFunctionExpressionThunk)(body),
	      variableDeclarationConst = s(_ast.VariableDeclaration, ['declarations', [_ast.VariableDeclarator]], { kind: 'const' }),
	      property = (kind, key, value) => {
		if (kind === 'init') return PropertyInit(key, value);else {
			(0, _privateUtil.assert)(kind === 'get');
			return PropertyGet(key, value);
		}
	},
	      memberExpression = (object, property) => property.type === 'Identifier' ? MemberExpressionIdentifier(object, property) : MemberExpressionComputed(object, property),
	      yieldExpressionNoDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: false }),
	      yieldExpressionDelegate = s(_ast.YieldExpression, ['argument', _ast.Expression], { delegate: true });

	exports.assignmentExpressionPlain = assignmentExpressionPlain;
	exports.callExpressionThunk = callExpressionThunk;
	exports.functionExpressionThunk = functionExpressionThunk;
	exports.variableDeclarationConst = variableDeclarationConst;
	exports.property = property;
	exports.memberExpression = memberExpression;
	exports.yieldExpressionNoDelegate = yieldExpressionNoDelegate;
	exports.yieldExpressionDelegate = yieldExpressionDelegate;
	const ArrowFunctionExpressionThunk = s(_ast.ArrowFunctionExpression, ['body', (0, _tuplDistType.Union)(_ast.BlockStatement, _ast.Expression)], { params: [] }),
	      FunctionExpressionThunkGenerator = s(_ast.FunctionExpression, ['body', _ast.BlockStatement], { id: null, params: [], generator: true }),
	      PropertyInit = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'init' }),
	      PropertyGet = s(_ast.Property, ['key', _ast.Expression, 'value', _ast.Expression], { kind: 'get' }),
	      MemberExpressionComputed = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Expression], { computed: true }),
	      MemberExpressionIdentifier = s(_ast.MemberExpression, ['object', _ast.Expression, 'property', _ast.Literal], { computed: false });
});
//# sourceMappingURL=data:application/json;base64,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LE9BOUQrRSxVQUFVLEVBOEQzRSxPQUFPLE9BOUQwRCxVQUFVLENBOER0RCxFQUMxQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQztPQUNqQix3QkFBd0IsR0FBRyxDQUFDLE1BL0RDLGdCQUFnQixFQWdFNUMsQ0FBRSxRQUFRLE9BakU0RSxVQUFVLEVBaUV4RSxVQUFVLE9BakVvRCxVQUFVLENBaUVoRCxFQUNoRCxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQztPQUNwQiwwQkFBMEIsR0FBRyxDQUFDLE1BbEVELGdCQUFnQixFQW1FNUMsQ0FBRSxRQUFRLE9BcEU0RSxVQUFVLEVBb0V4RSxVQUFVLE9BbkVmLE9BQU8sQ0FtRW1CLEVBQzdDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUEiLCJmaWxlIjoic3BlY2lhbGl6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0dXBsIGZyb20gJ3R1cGwvZGlzdC90dXBsJ1xuaW1wb3J0IHsgVW5pb24gfSBmcm9tICd0dXBsL2Rpc3QvdHlwZSdcbmltcG9ydCB7IEFycm93RnVuY3Rpb25FeHByZXNzaW9uLCBBc3NpZ25tZW50RXhwcmVzc2lvbiwgQmxvY2tTdGF0ZW1lbnQsIENhbGxFeHByZXNzaW9uLCBFeHByZXNzaW9uLFxuXHRGdW5jdGlvbkV4cHJlc3Npb24sIExpdGVyYWwsIE1lbWJlckV4cHJlc3Npb24sIFBhdHRlcm4sIFByb3BlcnR5LCBWYXJpYWJsZURlY2xhcmF0aW9uLFxuXHRWYXJpYWJsZURlY2xhcmF0b3IsIFlpZWxkRXhwcmVzc2lvbiB9IGZyb20gJy4vYXN0J1xuaW1wb3J0IHsgYXNzZXJ0IH0gZnJvbSAnLi9wcml2YXRlL3V0aWwnXG5cbmNvbnN0IHMgPSAoc3VwZXJUeXBlLCBuYW1lc1R5cGVzLCBwcm90b1Byb3BzKSA9PiB0dXBsKFxuXHRgJHtzdXBlclR5cGUubmFtZX1TcGVjaWFsaXphdGlvbmAsXG5cdHN1cGVyVHlwZSxcblx0YHNwZWNpYWxpemF0aW9uIG9mICR7c3VwZXJUeXBlfWAsXG5cdG5hbWVzVHlwZXMsXG5cdHByb3RvUHJvcHMpXG5leHBvcnQgZGVmYXVsdCBzXG5cbmV4cG9ydCBjb25zdFxuXHRhc3NpZ25tZW50RXhwcmVzc2lvblBsYWluID0gcyhBc3NpZ25tZW50RXhwcmVzc2lvbixcblx0XHRbICdsZWZ0JywgUGF0dGVybiwgJ3JpZ2h0JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgb3BlcmF0b3I6ICc9JyB9KSxcblxuXHRjYWxsRXhwcmVzc2lvblRodW5rID0gcyhDYWxsRXhwcmVzc2lvbixcblx0XHRbICdjYWxsZWUnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBhcmd1bWVudHM6IFtdIH0pLFxuXG5cdGZ1bmN0aW9uRXhwcmVzc2lvblRodW5rID0gKGJvZHksIGdlbmVyYXRvcikgPT5cblx0XHQoZ2VuZXJhdG9yID8gRnVuY3Rpb25FeHByZXNzaW9uVGh1bmtHZW5lcmF0b3IgOiBBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblRodW5rKShib2R5KSxcblxuXHR2YXJpYWJsZURlY2xhcmF0aW9uQ29uc3QgPSBzKFZhcmlhYmxlRGVjbGFyYXRpb24sXG5cdFx0WyAnZGVjbGFyYXRpb25zJywgW1ZhcmlhYmxlRGVjbGFyYXRvcl0gXSxcblx0XHR7IGtpbmQ6ICdjb25zdCcgfSksXG5cblx0cHJvcGVydHkgPSAoa2luZCwga2V5LCB2YWx1ZSkgPT4ge1xuXHRcdGlmIChraW5kID09PSAnaW5pdCcpXG5cdFx0XHRyZXR1cm4gUHJvcGVydHlJbml0KGtleSwgdmFsdWUpXG5cdFx0ZWxzZSB7XG5cdFx0XHRhc3NlcnQoa2luZCA9PT0gJ2dldCcpXG5cdFx0XHRyZXR1cm4gUHJvcGVydHlHZXQoa2V5LCB2YWx1ZSlcblx0XHR9XG5cdH0sXG5cblx0bWVtYmVyRXhwcmVzc2lvbiA9IChvYmplY3QsIHByb3BlcnR5KSA9PlxuXHRcdHByb3BlcnR5LnR5cGUgPT09ICdJZGVudGlmaWVyJyA/XG5cdFx0XHRNZW1iZXJFeHByZXNzaW9uSWRlbnRpZmllcihvYmplY3QsIHByb3BlcnR5KSA6XG5cdFx0XHRNZW1iZXJFeHByZXNzaW9uQ29tcHV0ZWQob2JqZWN0LCBwcm9wZXJ0eSksXG5cblx0eWllbGRFeHByZXNzaW9uTm9EZWxlZ2F0ZSA9IHMoWWllbGRFeHByZXNzaW9uLFxuXHRcdFsgJ2FyZ3VtZW50JywgRXhwcmVzc2lvbiBdLFxuXHRcdHsgZGVsZWdhdGU6IGZhbHNlIH0pLFxuXG5cdHlpZWxkRXhwcmVzc2lvbkRlbGVnYXRlID0gcyhZaWVsZEV4cHJlc3Npb24sXG5cdFx0WyAnYXJndW1lbnQnLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBkZWxlZ2F0ZTogdHJ1ZSB9KVxuXG5jb25zdFxuXHRBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvblRodW5rID0gcyhBcnJvd0Z1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdib2R5JywgVW5pb24oQmxvY2tTdGF0ZW1lbnQsIEV4cHJlc3Npb24pIF0sXG5cdFx0eyBwYXJhbXM6IFsgXSB9KSxcblx0RnVuY3Rpb25FeHByZXNzaW9uVGh1bmtHZW5lcmF0b3IgPSBzKEZ1bmN0aW9uRXhwcmVzc2lvbixcblx0XHRbICdib2R5JywgQmxvY2tTdGF0ZW1lbnQgXSxcblx0XHR7IGlkOiBudWxsLCBwYXJhbXM6IFtdLCBnZW5lcmF0b3I6IHRydWUgfSksXG5cdFByb3BlcnR5SW5pdCA9IHMoUHJvcGVydHksXG5cdFx0WyAna2V5JywgRXhwcmVzc2lvbiwgJ3ZhbHVlJywgRXhwcmVzc2lvbiBdLFxuXHRcdHsga2luZDogJ2luaXQnIH0pLFxuXHRQcm9wZXJ0eUdldCA9IHMoUHJvcGVydHksXG5cdFx0WyAna2V5JywgRXhwcmVzc2lvbiwgJ3ZhbHVlJywgRXhwcmVzc2lvbiBdLFxuXHRcdHsga2luZDogJ2dldCcgfSksXG5cdE1lbWJlckV4cHJlc3Npb25Db21wdXRlZCA9IHMoTWVtYmVyRXhwcmVzc2lvbixcblx0XHRbICdvYmplY3QnLCBFeHByZXNzaW9uLCAncHJvcGVydHknLCBFeHByZXNzaW9uIF0sXG5cdFx0eyBjb21wdXRlZDogdHJ1ZSB9KSxcblx0TWVtYmVyRXhwcmVzc2lvbklkZW50aWZpZXIgPSBzKE1lbWJlckV4cHJlc3Npb24sXG5cdFx0WyAnb2JqZWN0JywgRXhwcmVzc2lvbiwgJ3Byb3BlcnR5JywgTGl0ZXJhbCBdLFxuXHRcdHsgY29tcHV0ZWQ6IGZhbHNlIH0pXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==