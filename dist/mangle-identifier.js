if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports'], function (exports) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports.default = name => forbiddenNames.has(name) ? '_' + name : name.replace(/[^a-zA-Z0-9$_]/g, _ => '_' + _.charCodeAt(0));

	const needsMangle = name => forbiddenNames.has(name) || !propertyNameOk(name),
	      propertyNameOk = name => name.search(/[^a-zA-Z0-9$_]/) === -1;

	exports.needsMangle = needsMangle;
	exports.propertyNameOk = propertyNameOk;
	const unmangle = name => {
		if (name[0] === '_') {
			const rest = name.slice(1);
			if (forbiddenNames.has(rest)) return rest;
		}
		return name.replace(/_\d+/g, match => {
			const charCode = match.slice(1);
			const n = Number.parseInt(charCode);
			const ch = String.fromCharCode(n);
			return ch === '\0' ? match : ch;
		});
	};

	exports.unmangle = unmangle;
	const forbiddenNames = new Set(['abstract', 'arguments', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'comment', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'function*', 'global', 'goto', 'if', 'implements', 'import', 'in', 'instanceOf', 'int', 'interface', 'label', 'long', 'module', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield']);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmdsZS1pZGVudGlmaWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O21CQUFlLElBQUksSUFDbEIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FDdkIsR0FBRyxHQUFHLElBQUksR0FDVixJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFdEQsT0FDTixXQUFXLEdBQUcsSUFBSSxJQUNqQixjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztPQUVsRCxjQUFjLEdBQUcsSUFBSSxJQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7Ozs7QUFFL0IsT0FDTixRQUFRLEdBQUcsSUFBSSxJQUFJO0FBQ2xCLE1BQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtBQUNwQixTQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQzFCLE9BQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFDM0IsT0FBTyxJQUFJLENBQUE7R0FDWjtBQUNELFNBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxJQUFJO0FBQ3JDLFNBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDL0IsU0FBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNuQyxTQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2pDLFVBQU8sRUFBRSxLQUFLLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFBO0dBQy9CLENBQUMsQ0FBQTtFQUNGLENBQUE7OztBQUVGLE9BQU0sY0FBYyxHQUFHLElBQUksR0FBRyxDQUFDLENBQzlCLFVBQVUsRUFDVixXQUFXLEVBQ1gsU0FBUyxFQUNULE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLE9BQU8sRUFDUCxNQUFNLEVBQ04sT0FBTyxFQUNQLFNBQVMsRUFDVCxPQUFPLEVBQ1AsVUFBVSxFQUNWLFVBQVUsRUFDVixTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNQLFNBQVMsRUFDVCxPQUFPLEVBQ1AsS0FBSyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0osWUFBWSxFQUNaLFFBQVEsRUFDUixJQUFJLEVBQ0osWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLEVBQ1gsT0FBTyxFQUNQLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsUUFBUSxFQUNSLFFBQVEsRUFDUixPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsY0FBYyxFQUNkLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixLQUFLLEVBQ0wsTUFBTSxFQUNOLE9BQU8sRUFDUCxNQUFNLEVBQ04sT0FBTyxDQUNQLENBQUMsQ0FBQSIsImZpbGUiOiJtYW5nbGUtaWRlbnRpZmllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IG5hbWUgPT5cblx0Zm9yYmlkZGVuTmFtZXMuaGFzKG5hbWUpID9cblx0XHQnXycgKyBuYW1lIDpcblx0XHRuYW1lLnJlcGxhY2UoL1teYS16QS1aMC05JF9dL2csIF8gPT4gJ18nICsgXy5jaGFyQ29kZUF0KDApKVxuXG5leHBvcnQgY29uc3Rcblx0bmVlZHNNYW5nbGUgPSBuYW1lID0+XG5cdFx0Zm9yYmlkZGVuTmFtZXMuaGFzKG5hbWUpIHx8ICFwcm9wZXJ0eU5hbWVPayhuYW1lKSxcblxuXHRwcm9wZXJ0eU5hbWVPayA9IG5hbWUgPT5cblx0XHRuYW1lLnNlYXJjaCgvW15hLXpBLVowLTkkX10vKSA9PT0gLTFcblxuZXhwb3J0IGNvbnN0XG5cdHVubWFuZ2xlID0gbmFtZSA9PiB7XG5cdFx0aWYgKG5hbWVbMF0gPT09ICdfJykge1xuXHRcdFx0Y29uc3QgcmVzdCA9IG5hbWUuc2xpY2UoMSlcblx0XHRcdGlmIChmb3JiaWRkZW5OYW1lcy5oYXMocmVzdCkpXG5cdFx0XHRcdHJldHVybiByZXN0XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lLnJlcGxhY2UoL19cXGQrL2csIG1hdGNoID0+IHtcblx0XHRcdGNvbnN0IGNoYXJDb2RlID0gbWF0Y2guc2xpY2UoMSlcblx0XHRcdGNvbnN0IG4gPSBOdW1iZXIucGFyc2VJbnQoY2hhckNvZGUpXG5cdFx0XHRjb25zdCBjaCA9IFN0cmluZy5mcm9tQ2hhckNvZGUobilcblx0XHRcdHJldHVybiBjaCA9PT0gJ1xcMCcgPyBtYXRjaCA6IGNoXG5cdFx0fSlcblx0fVxuXG5jb25zdCBmb3JiaWRkZW5OYW1lcyA9IG5ldyBTZXQoW1xuXHQnYWJzdHJhY3QnLFxuXHQnYXJndW1lbnRzJyxcblx0J2Jvb2xlYW4nLFxuXHQnYnJlYWsnLFxuXHQnYnl0ZScsXG5cdCdjYXNlJyxcblx0J2NhdGNoJyxcblx0J2NoYXInLFxuXHQnY2xhc3MnLFxuXHQnY29tbWVudCcsXG5cdCdjb25zdCcsXG5cdCdjb250aW51ZScsXG5cdCdkZWJ1Z2dlcicsXG5cdCdkZWZhdWx0Jyxcblx0J2RlbGV0ZScsXG5cdCdkbycsXG5cdCdkb3VibGUnLFxuXHQnZWxzZScsXG5cdCdlbnVtJyxcblx0J2V2YWwnLFxuXHQnZXhwb3J0Jyxcblx0J2V4dGVuZHMnLFxuXHQnZmFsc2UnLFxuXHQnZmluYWwnLFxuXHQnZmluYWxseScsXG5cdCdmbG9hdCcsXG5cdCdmb3InLFxuXHQnZnVuY3Rpb24nLFxuXHQnZnVuY3Rpb24qJyxcblx0J2dsb2JhbCcsXG5cdCdnb3RvJyxcblx0J2lmJyxcblx0J2ltcGxlbWVudHMnLFxuXHQnaW1wb3J0Jyxcblx0J2luJyxcblx0J2luc3RhbmNlT2YnLFxuXHQnaW50Jyxcblx0J2ludGVyZmFjZScsXG5cdCdsYWJlbCcsXG5cdCdsb25nJyxcblx0J21vZHVsZScsXG5cdCduYXRpdmUnLFxuXHQnbmV3Jyxcblx0J251bGwnLFxuXHQncGFja2FnZScsXG5cdCdwcml2YXRlJyxcblx0J3Byb3RlY3RlZCcsXG5cdCdwdWJsaWMnLFxuXHQncmV0dXJuJyxcblx0J3Nob3J0Jyxcblx0J3N0YXRpYycsXG5cdCdzdXBlcicsXG5cdCdzd2l0Y2gnLFxuXHQnc3luY2hyb25pemVkJyxcblx0J3RoaXMnLFxuXHQndGhyb3cnLFxuXHQndGhyb3dzJyxcblx0J3RyYW5zaWVudCcsXG5cdCd0cnVlJyxcblx0J3RyeScsXG5cdCd0eXBlb2YnLFxuXHQndmFyJyxcblx0J3ZvaWQnLFxuXHQnd2hpbGUnLFxuXHQnd2l0aCcsXG5cdCd5aWVsZCdcbl0pXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==