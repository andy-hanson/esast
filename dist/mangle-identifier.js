if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './private/util'], function (exports, _privateUtil) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	exports['default'] = function (name) {
		return forbiddenNames.has(name) ? '_' + name : name.replace(/[^a-zA-Z0-9$_]/g, function (ch) {
			return '_' + ch.charCodeAt(0);
		});
	};

	var needsMangle = function needsMangle(name) {
		return forbiddenNames.has(name) || !propertyNameOk(name);
	},
	    propertyNameOk = function propertyNameOk(name) {
		return name.search(/[^a-zA-Z0-9$_]/) === -1;
	};

	exports.needsMangle = needsMangle;
	exports.propertyNameOk = propertyNameOk;
	var forbiddenNames = _privateUtil.newSet(['abstract', 'arguments', 'boolean', 'break', 'byte', 'case', 'catch', 'char', 'class', 'comment', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'double', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'final', 'finally', 'float', 'for', 'function', 'function*', 'global', 'goto', 'if', 'implements', 'import', 'in', 'instanceOf', 'int', 'interface', 'label', 'long', 'module', 'native', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'short', 'static', 'super', 'switch', 'synchronized', 'this', 'throw', 'throws', 'transient', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield', 'yield*']);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hbmdsZS1pZGVudGlmaWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7c0JBRWUsVUFBQSxJQUFJO1NBQ2xCLGNBQWMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQ3ZCLEdBQUcsR0FBRyxJQUFJLEdBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxVQUFBLEVBQUU7VUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7R0FBQSxDQUFDO0VBQUE7O0FBRXhELEtBQ04sV0FBVyxHQUFHLHFCQUFBLElBQUk7U0FDakIsY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUM7RUFBQTtLQUVsRCxjQUFjLEdBQUcsd0JBQUEsSUFBSTtTQUNwQixJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQUEsQ0FBQTs7U0FKckMsV0FBVyxHQUFYLFdBQVc7U0FHWCxjQUFjLEdBQWQsY0FBYztBQUdmLEtBQU0sY0FBYyxHQUFHLGFBZGQsTUFBTSxDQWNlLENBQzdCLFVBQVUsRUFDVixXQUFXLEVBQ1gsU0FBUyxFQUNULE9BQU8sRUFDUCxNQUFNLEVBQ04sTUFBTSxFQUNOLE9BQU8sRUFDUCxNQUFNLEVBQ04sT0FBTyxFQUNQLFNBQVMsRUFDVCxPQUFPLEVBQ1AsVUFBVSxFQUNWLFVBQVUsRUFDVixTQUFTLEVBQ1QsUUFBUSxFQUNSLElBQUksRUFDSixRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sRUFDTixNQUFNLEVBQ04sUUFBUSxFQUNSLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNQLFNBQVMsRUFDVCxPQUFPLEVBQ1AsS0FBSyxFQUNMLFVBQVUsRUFDVixXQUFXLEVBQ1gsUUFBUSxFQUNSLE1BQU0sRUFDTixJQUFJLEVBQ0osWUFBWSxFQUNaLFFBQVEsRUFDUixJQUFJLEVBQ0osWUFBWSxFQUNaLEtBQUssRUFDTCxXQUFXLEVBQ1gsT0FBTyxFQUNQLE1BQU0sRUFDTixRQUFRLEVBQ1IsUUFBUSxFQUNSLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxFQUNULFNBQVMsRUFDVCxXQUFXLEVBQ1gsUUFBUSxFQUNSLFFBQVEsRUFDUixPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxRQUFRLEVBQ1IsY0FBYyxFQUNkLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixLQUFLLEVBQ0wsTUFBTSxFQUNOLE9BQU8sRUFDUCxNQUFNLEVBQ04sT0FBTyxFQUNQLFFBQVEsQ0FDUixDQUFDLENBQUEiLCJmaWxlIjoibWFuZ2xlLWlkZW50aWZpZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdTZXQgfSBmcm9tICcuL3ByaXZhdGUvdXRpbCdcblxuZXhwb3J0IGRlZmF1bHQgbmFtZSA9PlxuXHRmb3JiaWRkZW5OYW1lcy5oYXMobmFtZSkgP1xuXHRcdCdfJyArIG5hbWUgOlxuXHRcdG5hbWUucmVwbGFjZSgvW15hLXpBLVowLTkkX10vZywgY2ggPT4gJ18nICsgY2guY2hhckNvZGVBdCgwKSlcblxuZXhwb3J0IGNvbnN0XG5cdG5lZWRzTWFuZ2xlID0gbmFtZSA9PlxuXHRcdGZvcmJpZGRlbk5hbWVzLmhhcyhuYW1lKSB8fCAhcHJvcGVydHlOYW1lT2sobmFtZSksXG5cblx0cHJvcGVydHlOYW1lT2sgPSBuYW1lID0+XG5cdFx0bmFtZS5zZWFyY2goL1teYS16QS1aMC05JF9dLykgPT09IC0xXG5cbmNvbnN0IGZvcmJpZGRlbk5hbWVzID0gbmV3U2V0KFtcblx0J2Fic3RyYWN0Jyxcblx0J2FyZ3VtZW50cycsXG5cdCdib29sZWFuJyxcblx0J2JyZWFrJyxcblx0J2J5dGUnLFxuXHQnY2FzZScsXG5cdCdjYXRjaCcsXG5cdCdjaGFyJyxcblx0J2NsYXNzJyxcblx0J2NvbW1lbnQnLFxuXHQnY29uc3QnLFxuXHQnY29udGludWUnLFxuXHQnZGVidWdnZXInLFxuXHQnZGVmYXVsdCcsXG5cdCdkZWxldGUnLFxuXHQnZG8nLFxuXHQnZG91YmxlJyxcblx0J2Vsc2UnLFxuXHQnZW51bScsXG5cdCdldmFsJyxcblx0J2V4cG9ydCcsXG5cdCdleHRlbmRzJyxcblx0J2ZhbHNlJyxcblx0J2ZpbmFsJyxcblx0J2ZpbmFsbHknLFxuXHQnZmxvYXQnLFxuXHQnZm9yJyxcblx0J2Z1bmN0aW9uJyxcblx0J2Z1bmN0aW9uKicsXG5cdCdnbG9iYWwnLFxuXHQnZ290bycsXG5cdCdpZicsXG5cdCdpbXBsZW1lbnRzJyxcblx0J2ltcG9ydCcsXG5cdCdpbicsXG5cdCdpbnN0YW5jZU9mJyxcblx0J2ludCcsXG5cdCdpbnRlcmZhY2UnLFxuXHQnbGFiZWwnLFxuXHQnbG9uZycsXG5cdCdtb2R1bGUnLFxuXHQnbmF0aXZlJyxcblx0J25ldycsXG5cdCdudWxsJyxcblx0J3BhY2thZ2UnLFxuXHQncHJpdmF0ZScsXG5cdCdwcm90ZWN0ZWQnLFxuXHQncHVibGljJyxcblx0J3JldHVybicsXG5cdCdzaG9ydCcsXG5cdCdzdGF0aWMnLFxuXHQnc3VwZXInLFxuXHQnc3dpdGNoJyxcblx0J3N5bmNocm9uaXplZCcsXG5cdCd0aGlzJyxcblx0J3Rocm93Jyxcblx0J3Rocm93cycsXG5cdCd0cmFuc2llbnQnLFxuXHQndHJ1ZScsXG5cdCd0cnknLFxuXHQndHlwZW9mJyxcblx0J3ZhcicsXG5cdCd2b2lkJyxcblx0J3doaWxlJyxcblx0J3dpdGgnLFxuXHQneWllbGQnLFxuXHQneWllbGQqJ1xuXSlcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9