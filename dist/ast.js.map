{"version":3,"sources":["ast.js"],"names":[],"mappings":";;;;;;;;;;;;;AAKO,KACN,IAAI,GAAG,cALQ,QAAQ,CAKP,MAAM,EAAE,MAAM,EAC7B,wBAAwB,CAAC;KAC1B,WAAW,GAAG,cAPC,QAAQ,CAOA,aAAa,EAAE,IAAI,EACzC,yBAAyB,CAAC;KAC3B,SAAS,GAAG,cATG,QAAQ,CASF,WAAW,EAAE,IAAI,EACrC,gEAAgE,CAAC;KAClE,UAAU,GAAG,cAXE,QAAQ,CAWD,YAAY,EAAE,IAAI,EACvC,qFAAqF,CAAC;KACvF,OAAO,GAAG,cAbK,QAAQ,CAaJ,SAAS,EAAE,IAAI,EACjC,kEAAkE,CAAC,CAAA;;SATpE,IAAI,GAAJ,IAAI;SAEJ,WAAW,GAAX,WAAW;SAEX,SAAS,GAAT,SAAS;SAET,UAAU,GAAV,UAAU;SAEV,OAAO,GAAP,OAAO;AAGR,KAAM,QAAQ,GAAG,kBAAA,SAAS;SAAI,UAAC,IAAI,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,EAAK;AAC/D,MAAG,GAAG,aAhBU,MAAM,CAgBT,GAAG,CAAC,CAAA;AACjB,OAAM,IAAI,GAAG,OAAM,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,UAAU,EAAE,KAAK,CAAC,CAAA;AAC3D,SAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAA;AAC7C,UAAO,IAAI,CAAA;GACX;EAAA,CAAA;AACD,KACC,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC;KAClB,CAAC,GAAG,QAAQ,CAAC,SAAS,CAAC;KACvB,CAAC,GAAG,QAAQ,CAAC,UAAU,CAAC;KACxB,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC;KACzB,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAA;;AAEf,KACN,OAAO,GAAG,CAAC,CAAC,SAAS,EACpB,iCAAiC,EACjC,CAAE,MAAM,EAAE,CAAC,SAAS,CAAC,CAAE,CAAC;KACzB,UAAU,GAAG,CAAC,CAAC,YAAY,sOAM1B,CAAE,MAAM,EAAE,MAAM,CAAE,CAAC;;;;AAGpB,eAAc,GAAG,CAAC,CAAC,gBAAgB,wIAIlC,EAAG,CAAC;KACL,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,yEAAyE,EACzE,CAAE,MAAM,EAAE,CAAC,SAAS,CAAC,CAAE,CAAC;KACzB,mBAAmB,GAAG,CAAC,CAAC,qBAAqB,6IAI5C,CAAE,YAAY,EAAE,UAAU,CAAE,CAAC;KAC9B,WAAW,GAAG,CAAC,CAAC,aAAa,EAC5B,mCAAmC,EACnC,CACC,MAAM,EAAE,UAAU,EAClB,YAAY,EAAE,SAAS,EACvB,WAAW,EAAE,aA1DP,QAAQ,CA0DQ,SAAS,CAAC,CAChC,CAAC;KACH,gBAAgB,GAAG,CAAC,CAAC,kBAAkB,EACtC,kCAAkC,EAClC,CACC,OAAO,EAAE,UAAU,EACnB,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,sBAAsB,EACtB,CAAE,OAAO,EAAE,aApEJ,QAAQ,CAoEK,UAAU,CAAC,CAAE,CAAC;KACnC,iBAAiB,GAAG,CAAC,CAAC,mBAAmB,EACxC,yBAAyB,EACzB,CAAE,OAAO,EAAE,aAvEJ,QAAQ,CAuEK,UAAU,CAAC,CAAE,CAAC;KACnC,UAAU,GAAG,CAAC,CAAC,YAAY,+GAI1B,CACC,MAAM,EAAE,aA7EF,QAAQ,CA6EG,UAAU,CAAC,EAC5B,YAAY,EAAE,CAAC,SAAS,CAAC,CACzB,CAAC;KACH,eAAe,GAAG,CAAC,CAAC,iBAAiB,EACpC,4DAA4D,EAC5D,CACC,cAAc,EAAE,UAAU,EAC1B,OAAO,EAAE,CAAC,UAAU,CAAC,CACrB,CAAC;KACH,eAAe,GAAG,CAAC,CAAC,iBAAiB,EACpC,uEAAuE,EACvE,CAAE,UAAU,EAAE,aAxFP,QAAQ,CAwFQ,UAAU,CAAC,CAAE,CAAC;KACtC,cAAc,GAAG,CAAC,CAAC,gBAAgB,8FAIlC,CAAE,UAAU,EAAE,UAAU,CAAE,CAAC;KAE5B,WAAW,GAAG,CAAC,CAAC,aAAa,EAC5B,2DAA2D,EAC3D,CACC,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,cAAc,CACtB,CAAC;KACH,YAAY,GAAG,CAAC,CAAC,cAAc;;AAE9B,6DAA4D,EAC5D,CACC,OAAO,EAAE,cAAc,EACvB,SAAS,EAAE,aA1GL,QAAQ,CA0GM,WAAW,CAAC,EAChC,WAAW,EAAE,aA3GP,QAAQ,CA2GQ,cAAc,CAAC,CACrC,CAAC;KACH,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,sBAAsB,EACtB,CACC,MAAM,EAAE,UAAU,EAClB,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,gBAAgB,GAAG,CAAC,CAAC,kBAAkB;;AAEtC,8BAA6B,EAC7B,CACC,MAAM,EAAE,SAAS,EACjB,MAAM,EAAE,UAAU,CAClB,CAAC;KACH,YAAY,GAAG,CAAC,CAAC,cAAc,+GAI9B,CACC,MAAM,EAAE,aA/HF,QAAQ,CA+HG,aA/HD,KAAK,CA+HE,mBAAmB,EAAE,UAAU,CAAC,CAAC,EACxD,MAAM,EAAE,aAhIF,QAAQ,CAgIG,UAAU,CAAC,EAC5B,QAAQ,EAAE,aAjIJ,QAAQ,CAiIK,UAAU,CAAC,EAC9B,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,6BAA6B,EAC7B,CACC,MAAM,EAAE,aAvIQ,KAAK,CAuIP,mBAAmB,EAAE,UAAU,CAAC,EAC9C,OAAO,EAAE,UAAU,EACnB,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,6BAA6B,EAC7B,CACC,MAAM,EAAE,aA9IQ,KAAK,CA8IP,mBAAmB,EAAE,UAAU,CAAC,EAC9C,OAAO,EAAE,UAAU,EACnB,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,iBAAiB,GAAG,CAAC,CAAC,mBAAmB,EACxC,yBAAyB,EACzB,EAAG,CAAC;;;;AAGL,SAAQ,GAAG,cAzJI,QAAQ,CAyJH,UAAU,EAAE,IAAI,EAAE,4CAA4C,CAAC;;;AAEnF,oBAAmB,GAAG,CAAC,CAAC,qBAAqB,EAC5C,qDAAqD,EACrD,CACC,IAAI,EAAE,UAAU,EAChB,QAAQ,EAAE,CAAC,UAAU,CAAC,EACtB,MAAM,EAAE,cAAc,EACtB,WAAW,EAAE,OAAO,CACpB,CAAC;KAEH,kBAAkB,GAAG,CAAC,CAAC,oBAAoB,EAC1C,iDAAiD,EACjD,CACC,IAAI,EAAE,OAAO,EACb,MAAM,EAAE,aAtKF,QAAQ,CAsKG,UAAU,CAAC,CAC5B,CAAC;KACH,uBAAuB,GAAG,IAAI,GAAG,CAAC,CAAE,OAAO,EAAE,KAAK,EAAE,KAAK,CAAE,CAAC;KAC5D,mBAAmB,GAAG,CAAC,CAAC,qBAAqB;;yGAK5C,CACC,MAAM,EAAE,uBAAuB,EAC/B,cAAc,EAAE,CAAC,kBAAkB,CAAC,CACpC,CAAC;;;;AAGH,eAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,qBAAqB,EACrB,EAAG,CAAC;KACL,eAAe,GAAG,CAAC,CAAC,iBAAiB,EACpC,mBAAmB,EACnB,CAAE,UAAU,EAAE,CAAC,aAzLR,QAAQ,CAyLS,UAAU,CAAC,CAAC,CAAE,CAAC;KACxC,YAAY,GAAG,IAAI,GAAG,CAAC,CAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAE,CAAC;KAChD,QAAQ,GAAG,CAAC,CAAC,UAAU;;0HAKtB,CACC,MAAM,EAAE,YAAY;;AAEpB,MAAK,EAAE,aAnMS,KAAK,CAmMR,OAAO,EAAE,UAAU,CAAC,EACjC,OAAO,EAAE,UAAU,CACnB,CAAC;KACH,gBAAgB,GAAG,CAAC,CAAC,kBAAkB,EACtC,oBAAoB,EACpB,CAAE,YAAY,EAAE,CAAC,QAAQ,CAAC,CAAE,CAAC;;;AAE9B,mBAAkB,GAAG,CAAC,CAAC,oBAAoB,mQAM1C,CACC,IAAI,EAAE,aAjNA,QAAQ,CAiNC,UAAU,CAAC,EAC1B,QAAQ,EAAE,CAAC,OAAO,CAAC,EACnB,MAAM,EAAE,cAAc,EACtB,WAAW,EAAE,OAAO,CACpB,EACD;AACC,eAAa,EAAA,yBAAG;AACf,OAAI,CAAC,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;GACxC;EACD,CAAC;;;AAEH,wBAAuB,GAAG,CAAC,CAAC,yBAAyB,EACpD,6DAA6D,EAC7D,CACC,QAAQ,EAAE,CAAC,OAAO,CAAC,EACnB,MAAM,EAAE,aAhOQ,KAAK,CAgOP,cAAc,EAAE,UAAU,CAAC,CACzC,CAAC;KACH,kBAAkB,GAAG,CAAC,CAAC,oBAAoB,wKAK1C,CAAE,aAAa,EAAE,CAAE,UAAU,CAAE,CAAE,CAAC;;;AAEnC,cAAa,GAAG,IAAI,GAAG,CAAC,CAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,QAAQ,CAAE,CAAC;KAC3E,eAAe,GAAG,CAAC,CAAC,iBAAiB,EACpC,8CAA8C,EAC9C,CACC,UAAU,EAAE,aAAa,EACzB,UAAU,EAAE,UAAU,CACtB,CAAC;KACH,cAAc,GAAG,IAAI,GAAG,CAAC,CACxB,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EACxB,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EACpB,IAAI,EAAE,IAAI,EAAE,KAAK,EACjB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EACvB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EACnB,YAAY,CAAC,CAAC;;;AAEf,iBAAgB,GAAG,CAAC,CAAC,kBAAkB,EACtC,iDAAiD,EACjD,CACC,UAAU,EAAE,cAAc,EAC1B,MAAM,EAAE,UAAU,EAClB,OAAO,EAAE,UAAU,CACnB,CAAC;KACH,kBAAkB,GAAG,IAAI,GAAG,CAAC,CAC5B,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EACjC,KAAK,EAAE,KAAK,EAAE,MAAM,EACpB,IAAI,EAAE,IAAI,EAAE,IAAI,CAChB,CAAC;KACF,oBAAoB,GAAG,CAAC,CAAC,sBAAsB,yHAK9C,CACC,UAAU,EAAE,kBAAkB,EAC9B,MAAM,EAAE,OAAO,EACf,OAAO,EAAE,UAAU,CACnB,CAAC;KACH,cAAc,GAAG,IAAI,GAAG,CAAC,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;KACxC,gBAAgB,GAAG,CAAC,CAAC,kBAAkB,EACtC,kEAAkE,EAClE,CACC,UAAU,EAAE,cAAc,EAC1B,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,OAAO,CACjB,CAAC;KACH,eAAe,GAAG,IAAI,GAAG,CAAC,CAAE,IAAI,EAAE,IAAI,CAAE,CAAC;KACzC,iBAAiB,GAAG,CAAC,CAAC,mBAAmB,EACxC,uDAAuD,EACvD,CACC,UAAU,EAAE,eAAe,EAC3B,MAAM,EAAE,UAAU,EAClB,OAAO,EAAE,UAAU,CACnB,CAAC;KACH,qBAAqB,GAAG,CAAC,CAAC,uBAAuB,EAChD,kCAAkC,EAClC,CACC,MAAM,EAAE,UAAU,EAClB,YAAY,EAAE,UAAU,EACxB,WAAW,EAAE,UAAU,CACvB,CAAC;KACH,aAAa,GAAG,CAAC,CAAC,eAAe,EAChC,mDAAmD,EACnD,CACC,QAAQ,EAAE,UAAU,EACpB,WAAW,EAAE,CAAC,UAAU,CAAC,CACzB,CAAC;KACH,cAAc,GAAG,CAAC,CAAC,gBAAgB,EAClC,sBAAsB,EACtB,CACC,QAAQ,EAAE,UAAU,EACpB,WAAW,EAAE,CAAC,UAAU,CAAC,CACzB,CAAC;KACH,gBAAgB,GAAG,CAAC,CAAC,kBAAkB;;kIAKtC,CACC,QAAQ,EAAE,UAAU,EACpB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,OAAO,CACnB,CAAC;KACH,eAAe,GAAG,CAAC,CAAC,iBAAiB,EACpC,wCAAwC,EACxC,CACC,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,OAAO,CACnB,CAAC;;;;AAGH,QAAO,GAAG,CAAC,CAAC,SAAS,EACpB,kBAAkB,EAClB,CAAE,OAAO,EAAE,MAAM,CAAE,CAAC;;;;AAGrB,mBAAkB,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC,oBAAoB,uIAI3D,CAAE,KAAK,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAE,EACvC;AACC,MAAI,EAAE,UAAU;AAChB,QAAM,EAAE,KAAK;AACb,eAAa,EAAA,yBAAG;AACf,OAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAA;AACtB,OAAI,CAAC,IAAI,GAAG,MAAM,CAAA;GAClB;EACD,CAAC;KACH,aAAa,GAAG,CAAC,CAAC,eAAe,EAChC,qDAAqD,EACrD,CAAE,YAAY,EAAE,CAAC,kBAAkB,CAAC,CAAE,CAAC;KACxC,YAAY,GAAG,CAAC,CAAC,cAAc,EAC9B,iDAAiD,EACjD,CAAE,UAAU,EAAE,CAAC,aA3VR,QAAQ,CA2VS,OAAO,CAAC,CAAC,CAAE,CAAC;KACrC,WAAW,GAAG,CAAC,CAAC,aAAa;;8HAK5B,CAAE,UAAU,EAAE,OAAO,CAAE,CAAC;;;;;;;AAMzB,qBAAoB,GAAG,IAAI,GAAG,CAAC,CAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAE,CAAC;KACzE,gBAAgB,GAAG,CAAC,CAAC,kBAAkB;;;6GAMtC,CACC,KAAK,EAAE,UAAU,EACjB,OAAO,EAAE,kBAAkB,EAC3B,MAAM,EAAE,oBAAoB,EAC5B,QAAQ,EAAE,OAAO,EACjB,UAAU,EAAE,OAAO,CACnB,CAAC;KACH,SAAS,GAAG,CAAC,CAAC,WAAW,EACxB,sBAAsB,EACtB,CAAE,MAAM,EAAE,CAAC,gBAAgB,CAAC,CAAE,CAAC;KAChC,KAAK,GAAG,cA1XO,QAAQ,CA0XN,OAAO,EAAE,IAAI,EAC7B,sCAAsC,CAAC;;;AAExC,iBAAgB,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,kBAAkB,EACpD,gCAAgC,EAChC,CACC,IAAI,EAAE,UAAU,EAChB,YAAY,EAAE,aA/XR,QAAQ,CA+XS,UAAU,CAAC,EAClC,MAAM,EAAE,SAAS,CACjB,CAAC;KACH,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,iBAAiB;;AAElD,gCAA+B,EAC/B,CACC,IAAI,EAAE,aAtYA,QAAQ,CAsYC,UAAU,CAAC,EAC1B,YAAY,EAAE,aAvYR,QAAQ,CAuYS,UAAU,CAAC,EAClC,MAAM,EAAE,SAAS,CACjB,CAAC;KAEH,eAAe,GAAG,cA7YH,QAAQ,CA6YI,iBAAiB,EAAE,IAAI,EACjD,iDAAiD,CAAC;KAEnD,uBAAuB,GAAG,cAhZX,QAAQ,CAgZY,yBAAyB,EAAE,IAAI,EACjE,uEAAuE,CAAC;KACzE,iBAAiB,GAAG,CAAC,CAAC,mBAAmB;;uLAMxC,CACC,YAAY,EAAE,CAAC,uBAAuB,CAAC;;AAEvC,SAAQ,EAAE,OAAO,CACjB,CAAC;KACH,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC,CAAC,iBAAiB,2OAK5D,CACC,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,UAAU,CACnB,EACD;AACC,eAAa,EAAA,yBAAG;AACf,OAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAA;GAC3B;EACD,CAAC;KACH,sBAAsB,GAAG,QAAQ,CAAC,uBAAuB,CAAC,CAAC,wBAAwB,EAClF,qDAAqD,EACrD,CAAE,OAAO,EAAE,UAAU,CAAE,CAAC;KACzB,wBAAwB,GAAG,QAAQ,CAAC,uBAAuB,CAAC,CAAC,0BAA0B,EACtF,8DAA8D,EAC9D,CAAE,OAAO,EAAE,UAAU,CAAE,CAAC;KAEzB,eAAe,GAAI,QAAQ,CAAC,eAAe,CAAC,CAAC,iBAAiB,8NAK7D,CACC,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,UAAU,CACnB,EACD;AACC,eAAa,EAAA,yBAAG;AACf,OAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAA;GAC3B;EACD,CAAC;KACH,sBAAsB,GAAG,CAAC,CAAC,wBAAwB,uKAKlD,CACC,aAAa,EAAE,aAtcT,QAAQ,CAscU,WAAW,CAAC,EACpC,YAAY,EAAE,CAAC,eAAe,CAAC;;AAE/B,SAAQ,EAAE,aAzcJ,QAAQ,CAycK,OAAO,CAAC,CAC3B,CAAC;KACH,wBAAwB,GAAG,CAAC,CAAC,0BAA0B,EACtD,+BAA+B,EAC/B,CACC,aAAa,EAAE,aA9cC,KAAK,CA8cA,WAAW,EAAE,UAAU,CAAC,CAC7C,CAAC;KACH,oBAAoB,GAAG,CAAC,CAAC,sBAAsB,EAC9C,yBAAyB;;AAEzB,EAAE,QAAQ,EAAE,OAAO,CAAE,CAAC,CAAA;SAvbvB,OAAO,GAAP,OAAO;SAGP,UAAU,GAAV,UAAU;SASV,cAAc,GAAd,cAAc;SAKd,cAAc,GAAd,cAAc;SAGd,mBAAmB,GAAnB,mBAAmB;SAKnB,WAAW,GAAX,WAAW;SAOX,gBAAgB,GAAhB,gBAAgB;SAMhB,cAAc,GAAd,cAAc;SAGd,iBAAiB,GAAjB,iBAAiB;SAGjB,UAAU,GAAV,UAAU;SAQV,eAAe,GAAf,eAAe;SAMf,eAAe,GAAf,eAAe;SAGf,cAAc,GAAd,cAAc;SAMd,WAAW,GAAX,WAAW;SAMX,YAAY,GAAZ,YAAY;SAQZ,cAAc,GAAd,cAAc;SAMd,gBAAgB,GAAhB,gBAAgB;SAOhB,YAAY,GAAZ,YAAY;SAUZ,cAAc,GAAd,cAAc;SAOd,cAAc,GAAd,cAAc;SAOd,iBAAiB,GAAjB,iBAAiB;SAKjB,QAAQ,GAAR,QAAQ;SAER,mBAAmB,GAAnB,mBAAmB;SASnB,kBAAkB,GAAlB,kBAAkB;SAMlB,uBAAuB,GAAvB,uBAAuB;SACvB,mBAAmB,GAAnB,mBAAmB;SAWnB,cAAc,GAAd,cAAc;SAGd,eAAe,GAAf,eAAe;SAGf,YAAY,GAAZ,YAAY;SACZ,QAAQ,GAAR,QAAQ;SAWR,gBAAgB,GAAhB,gBAAgB;SAIhB,kBAAkB,GAAlB,kBAAkB;SAkBlB,uBAAuB,GAAvB,uBAAuB;SAMvB,kBAAkB,GAAlB,kBAAkB;SAOlB,aAAa,GAAb,aAAa;SACb,eAAe,GAAf,eAAe;SAMf,cAAc,GAAd,cAAc;SAQd,gBAAgB,GAAhB,gBAAgB;SAOhB,kBAAkB,GAAlB,kBAAkB;SAKlB,oBAAoB,GAApB,oBAAoB;SAUpB,cAAc,GAAd,cAAc;SACd,gBAAgB,GAAhB,gBAAgB;SAOhB,eAAe,GAAf,eAAe;SACf,iBAAiB,GAAjB,iBAAiB;SAOjB,qBAAqB,GAArB,qBAAqB;SAOrB,aAAa,GAAb,aAAa;SAMb,cAAc,GAAd,cAAc;SAMd,gBAAgB,GAAhB,gBAAgB;SAUhB,eAAe,GAAf,eAAe;SAQf,OAAO,GAAP,OAAO;SAKP,kBAAkB,GAAlB,kBAAkB;SAclB,aAAa,GAAb,aAAa;SAGb,YAAY,GAAZ,YAAY;SAGZ,WAAW,GAAX,WAAW;SAWX,oBAAoB,GAApB,oBAAoB;SACpB,gBAAgB,GAAhB,gBAAgB;SAahB,SAAS,GAAT,SAAS;SAGT,KAAK,GAAL,KAAK;SAGL,gBAAgB,GAAhB,gBAAgB;SAOhB,eAAe,GAAf,eAAe;SASf,eAAe,GAAf,eAAe;SAGf,uBAAuB,GAAvB,uBAAuB;SAEvB,iBAAiB,GAAjB,iBAAiB;SAWjB,eAAe,GAAf,eAAe;SAef,sBAAsB,GAAtB,sBAAsB;SAGtB,wBAAwB,GAAxB,wBAAwB;SAIxB,eAAe,GAAf,eAAe;SAef,sBAAsB,GAAtB,sBAAsB;SAWtB,wBAAwB,GAAxB,wBAAwB;SAKxB,oBAAoB,GAApB,oBAAoB","file":"ast.js","sourcesContent":["import Loc from './Loc'\nimport tuple, { abstract } from './private/tuple'\nimport { assert, dedent, pAdd } from './private/util'\nimport { Nullable, Union } from './private/type'\n\nexport const\n\tNode = abstract('Node', Object,\n\t\t'Base type of all Asts.'),\n\tDeclaration = abstract('Declaration', Node,\n\t\t'Identifier declaration.'),\n\tStatement = abstract('Statement', Node,\n\t\t'Blocks of code have lines that are Statements or Declarations.'),\n\tExpression = abstract('Expression', Node,\n\t\t'Code that has a value. To use one in a statement position, see ExpressionStatement.'),\n\tPattern = abstract('Pattern', Node,\n\t\t'Can go in a parameter list or on the left side of an assignment.')\n\nconst makeType = superType => (name, doc, namesTypes, proto) => {\n\tdoc = dedent(doc)\n\tconst type = tuple(name, superType, doc, namesTypes, proto)\n\tObject.assign(type.prototype, { type: name })\n\treturn type\n}\nconst\n\tn = makeType(Node),\n\ts = makeType(Statement),\n\te = makeType(Expression),\n\td = makeType(Declaration),\n\tp = makeType(Pattern)\n\nexport const\n\tProgram = n('Program',\n\t\t'A complete program source tree.',\n\t\t[ 'body', [Statement] ]),\n\tIdentifier = n('Identifier',\n\t\t`\n\t\t\tA JavaScript identifier.\n\t\t\tIt is assumed that you have called \\`mangleIdentifier\\` as appropriate.\n\t\t\tAlso look at \\`esast.util idCached\\`,\n\t\t\twhich mangles and avoids constructing the same identifier twice.`,\n\t\t[ 'name', String ]),\n\n\t// Statements\n\tEmptyStatement = s('EmptyStatement',\n\t\t`\n\t\t\tAn empty statement, i.e., a solitary semicolon.\n\t\t\tNot useful for code generation, but some parsers will return these.`,\n\t\t[ ]),\n\tBlockStatement = s('BlockStatement',\n\t\t'A block statement, i.e., a sequence of statements surrounded by braces.',\n\t\t[ 'body', [Statement] ]),\n\tExpressionStatement = s('ExpressionStatement',\n\t\t`\n\t\t\tAn expression statement, i.e., a statement consisting of a single expression.\n\t\t\tSee \\`esast.util toStatement toStatements\\`.`,\n\t\t[ 'expression', Expression ]),\n\tIfStatement = s('IfStatement',\n\t\t'An if (or if ... else) statement.',\n\t\t[\n\t\t\t'test', Expression,\n\t\t\t'consequent', Statement,\n\t\t\t'alternate', Nullable(Statement)\n\t\t]),\n\tLabeledStatement = s('LabeledStatement',\n\t\t'A statement prefixed by a label.',\n\t\t[\n\t\t\t'label', Identifier,\n\t\t\t'body', Statement\n\t\t]),\n\tBreakStatement = s('BreakStatement',\n\t\t'The `break` keyword.',\n\t\t[ 'label', Nullable(Identifier) ]),\n\tContinueStatement = s('ContinueStatement',\n\t\t'The `continue` keyword.',\n\t\t[ 'label', Nullable(Identifier) ]),\n\tSwitchCase = n('SwitchCase',\n\t\t`\n\t\t\tA single \\`case\\` within a SwitchStatement.\n\t\t\tIf \\`test\\` is \\`null\\`, this is the \\`default\\` case.`,\n\t\t[\n\t\t\t'test', Nullable(Expression),\n\t\t\t'consequent', [Statement]\n\t\t]),\n\tSwitchStatement = s('SwitchStatement',\n\t\t'Only the last entry of `cases` is allowed to be `default`.',\n\t\t[\n\t\t\t'discriminant', Expression,\n\t\t\t'cases', [SwitchCase]\n\t\t]),\n\tReturnStatement = s('ReturnStatement',\n\t\t'The `return` keyword, optionally followed by an Expression to return.',\n\t\t[ 'argument', Nullable(Expression) ]),\n\tThrowStatement = s('ThrowStatement',\n\t\t`\n\t\t\tThe \\`throw\\` keyword, and something to throw.\n\t\t\tSee \\`esast.util throwError\\`.`,\n\t\t[ 'argument', Expression ]),\n\n\tCatchClause = n('CatchClause',\n\t\t'Must be *part* of a TryStatement -- does *not* follow it.',\n\t\t[\n\t\t\t'param', Pattern,\n\t\t\t'body', BlockStatement\n\t\t]),\n\tTryStatement = s('TryStatement',\n\t\t// TODO: Assert in postConstruct\n\t\t'At least one of `handler` or `finalizer` must be non-null.',\n\t\t[\n\t\t\t'block', BlockStatement,\n\t\t\t'handler', Nullable(CatchClause),\n\t\t\t'finalizer', Nullable(BlockStatement)\n\t\t]),\n\tWhileStatement = s('WhileStatement',\n\t\t'`while (test) body`.',\n\t\t[\n\t\t\t'test', Expression,\n\t\t\t'body', Statement\n\t\t]),\n\tDoWhileStatement = s('DoWhileStatement',\n\t\t// TODO: Note that body needs braces!\n\t\t'`do { body } while (test)`.',\n\t\t[\n\t\t\t'body', Statement,\n\t\t\t'test', Expression\n\t\t]),\n\tForStatement = s('ForStatement',\n\t\t`\n\t\t\t\\`for (init; test; update) body\\`.\n\t\t\tNot to be confused with ForInStatement or ForOfStatement.`,\n\t\t[\n\t\t\t'init', Nullable(Union(VariableDeclaration, Expression)),\n\t\t\t'test', Nullable(Expression),\n\t\t\t'update', Nullable(Expression),\n\t\t\t'body', Statement\n\t\t]),\n\tForInStatement = s('ForInStatement',\n\t\t'`for (left in right) body`.',\n\t\t[\n\t\t\t'left', Union(VariableDeclaration, Expression),\n\t\t\t'right', Expression,\n\t\t\t'body', Statement\n\t\t]),\n\tForOfStatement = s('ForOfStatement',\n\t\t'`for (left of right) body`.',\n\t\t[\n\t\t\t'left', Union(VariableDeclaration, Expression),\n\t\t\t'right', Expression,\n\t\t\t'body', Statement\n\t\t]),\n\tDebuggerStatement = s('DebuggerStatement',\n\t\t'The `debugger` keyword.',\n\t\t[ ]),\n\n\t// Declarations\n\tFunction = abstract('Function', Node, 'FunctionDeclaration or FunctionExpression.'),\n\t// TODO: Function too\n\tFunctionDeclaration = d('FunctionDeclaration',\n\t\t'Unlike for FunctionExpression, id must not be null.',\n\t\t[\n\t\t\t'id', Identifier,\n\t\t\t'params', [Identifier],\n\t\t\t'body', BlockStatement,\n\t\t\t'generator', Boolean\n\t\t]),\n\n\tVariableDeclarator = n('VariableDeclarator',\n\t\t'A single variable within a VariableDeclaration.',\n\t\t[\n\t\t\t'id', Pattern,\n\t\t\t'init', Nullable(Expression)\n\t\t]),\n\tVariableDeclarationKind = new Set([ 'const', 'let', 'var' ]),\n\tVariableDeclaration = d('VariableDeclaration',\n\t\t// TODO: Assert\n\t\t`\n\t\t\tDeclares and optionally initializes many variables.\n\t\t\tMust be at least one declaration.`,\n\t\t[\n\t\t\t'kind', VariableDeclarationKind,\n\t\t\t'declarations', [VariableDeclarator]\n\t\t]),\n\n\t// Expressions\n\tThisExpression = e('ThisExpression',\n\t\t'The `this` keyword.',\n\t\t[ ]),\n\tArrayExpression = e('ArrayExpression',\n\t\t'An array literal.',\n\t\t[ 'elements', [Nullable(Expression)] ]),\n\tPropertyKind = new Set([ 'init', 'get', 'set' ]),\n\tProperty = n('Property',\n\t\t// TODO:ASSERT\n\t\t`\n\t\t\tPart of an ObjectExpression.\n\t\t\tIf kind is 'get' or 'set', then value should be a FunctionExpression.`,\n\t\t[\n\t\t\t'kind', PropertyKind,\n\t\t\t// TODO: LiteralString | LiteralNumber\n\t\t\t'key', Union(Literal, Identifier),\n\t\t\t'value', Expression\n\t\t]),\n\tObjectExpression = e('ObjectExpression',\n\t\t'An object literal.',\n\t\t[ 'properties', [Property] ]),\n\t// TODO: Inherits from Function\n\tFunctionExpression = e('FunctionExpression',\n\t\t`\n\t\t\t\\`function id(params) body\\` or \\`function* id(params) body\\`.\n\t\t\tFunction in an expression position.\n\t\t\tTo declare a function, use FunctionDeclaration, not ExpressionStatement.\n\t\t\tSee also \\`esast.util thunk\\` and ArrowFunctionExpression.`,\n\t\t[\n\t\t\t'id', Nullable(Identifier),\n\t\t\t'params', [Pattern],\n\t\t\t'body', BlockStatement,\n\t\t\t'generator', Boolean\n\t\t],\n\t\t{\n\t\t\tpostConstruct() {\n\t\t\t\tthis.generator = Boolean(this.generator)\n\t\t\t}\n\t\t}),\n\t// TODO: Inherits from Function\n\tArrowFunctionExpression = e('ArrowFunctionExpression',\n\t\t'Like FunctionExpression but uses the `params => body` form.',\n\t\t[\n\t\t\t'params', [Pattern],\n\t\t\t'body', Union(BlockStatement, Expression)\n\t\t]),\n\tSequenceExpression = e('SequenceExpression',\n\t\t`\n\t\t\t\\`expressions[0], expressions[1], ...\\`.\n\t\t\tExpression composed of other expressions, separated by the comma operator.\n\t\t\t*Not* for parameter lists.`,\n\t\t[ 'expressions', [ Expression ] ]),\n\t// TODO: test `- new X`. Probably need parens around argument.\n\tUnaryOperator = new Set([ '-', '+', '!', '~', 'typeof', 'void', 'delete' ]),\n\tUnaryExpression = e('UnaryExpression',\n\t\t'`operator argument`. Calls a unary operator.',\n\t\t[\n\t\t\t'operator', UnaryOperator,\n\t\t\t'argument', Expression\n\t\t]),\n\tBinaryOperator = new Set([\n\t\t'==', '!=', '===', '!==',\n\t\t'<', '<=', '>', '>=',\n\t\t'<<', '>>', '>>>',\n\t\t'+', '-', '*', '/', '%',\n\t\t'|', '^', '&', 'in',\n\t\t'instanceof']),\n\t// TODO: Render with parens\n\tBinaryExpression = e('BinaryExpression',\n\t\t'`left operator right`. Calls a binary operator.',\n\t\t[\n\t\t\t'operator', BinaryOperator,\n\t\t\t'left', Expression,\n\t\t\t'right', Expression\n\t\t]),\n\tAssignmentOperator = new Set([\n\t\t'=', '+=', '-=', '*=', '/=', '%=',\n\t\t'<<=', '>>=', '>>>=',\n\t\t'|=', '^=', '&='\n\t]),\n\tAssignmentExpression = e('AssignmentExpression',\n\t\t`\n\t\t\t\\`left operator right\\`.\n\t\t\tMutates an existing variable.\n\t\t\tDo not confuse with VariableDeclaration.`,\n\t\t[\n\t\t\t'operator', AssignmentOperator,\n\t\t\t'left', Pattern,\n\t\t\t'right', Expression\n\t\t]),\n\tUpdateOperator = new Set([ '++', '--' ]),\n\tUpdateExpression = e('UpdateExpression',\n\t\t'`++argument` or `argument++`. Increments or decrements a number.',\n\t\t[\n\t\t\t'operator', UpdateOperator,\n\t\t\t'argument', Expression,\n\t\t\t'prefix', Boolean\n\t\t]),\n\tLogicalOperator = new Set([ '||', '&&' ]),\n\tLogicalExpression = e('LogicalExpression',\n\t\t'`left operator right`. Calls a lazy logical operator.',\n\t\t[\n\t\t\t'operator', LogicalOperator,\n\t\t\t'left', Expression,\n\t\t\t'right', Expression\n\t\t]),\n\tConditionalExpression = e('ConditionalExpression',\n\t\t'`test ? consequent : alternate`.',\n\t\t[\n\t\t\t'test', Expression,\n\t\t\t'consequent', Expression,\n\t\t\t'alternate', Expression\n\t\t]),\n\tNewExpression = e('NewExpression',\n\t\t'Just like CallExpression but with `new` in front.',\n\t\t[\n\t\t\t'callee', Expression,\n\t\t\t'arguments', [Expression]\n\t\t]),\n\tCallExpression = e('CallExpression',\n\t\t'`callee(arguments)`.',\n\t\t[\n\t\t\t'callee', Expression,\n\t\t\t'arguments', [Expression]\n\t\t]),\n\tMemberExpression = e('MemberExpression',\n\t\t// TODO:ASSERT\n\t\t`\n\t\t\tIf computed === true, \\`object[property]\\`.\n\t\t\tElse, \\`object.property\\` -- meaning property should be an Identifier.`,\n\t\t[\n\t\t\t'object', Expression,\n\t\t\t'property', Expression,\n\t\t\t'computed', Boolean\n\t\t]),\n\tYieldExpression = e('YieldExpression',\n\t\t'`yield argument` or `yield* argument`.',\n\t\t[\n\t\t\t'argument', Expression,\n\t\t\t'delegate', Boolean\n\t\t]),\n\t// TODO: Literal as abstract type\n\t// Value: Number | String | null | Boolean\n\tLiteral = e('Literal',\n\t\t'A literal token.',\n\t\t[ 'value', Object ]),\n\n\t// Patterns\n\tAssignmentProperty = makeType(Property)('AssignmentProperty',\n\t\t`\n\t\t\tJust like a Property, but kind is always \\`init\\`.\n\t\t\tAlthough technically its own type, \\`_.type\\` will be 'Property'.`,\n\t\t[ 'key', Identifier, 'value', Pattern ],\n\t\t{\n\t\t\ttype: 'Property',\n\t\t\tmethod: false,\n\t\t\tpostConstruct() {\n\t\t\t\tif (this.value === null)\n\t\t\t\t\tthis.value = this.key\n\t\t\t\tthis.kind = 'init'\n\t\t\t}\n\t\t}),\n\tObjectPattern = p('ObjectPattern',\n\t\t'`{ a, b: c } = ...`. Object deconstructing pattern.',\n\t\t[ 'properties', [AssignmentProperty] ]),\n\tArrayPattern = p('ArrayPattern',\n\t\t'`[ a, b ] = ...`. Array deconstructing pattern.',\n\t\t[ 'elements', [Nullable(Pattern)] ]),\n\tRestElement = p('RestElement',\n\t\t// TODO:TEST\n\t\t`\n\t\t\tCan be the last argument to a FunctionExpression/FunctionDeclaration\n\t\t\tor  go at the end of an ArrayPattern.`,\n\t\t[ 'argument', Pattern ]),\n\t// TODO: What is this?\n\t// AssignmentPattern = p('AssignmentPattern',\n\t//\t'left', Pattern,\n\t//\t'right', Pattern),\n\n\tMethodDefinitionKind = new Set([ 'constructor', 'method', 'get', 'set' ]),\n\tMethodDefinition = n('MethodDefinition',\n\t\t// TODO:Assert\n\t\t// TODO: util method for constructor.\n\t\t`\n\t\t\tPart of a ClassBody.\n\t\t\tIf kind is 'constructor', key must be Identifier('constructor').`,\n\t\t[\n\t\t\t'key', Identifier,\n\t\t\t'value', FunctionExpression,\n\t\t\t'kind', MethodDefinitionKind,\n\t\t\t'static', Boolean,\n\t\t\t'computed', Boolean\n\t\t]),\n\tClassBody = n('ClassBody',\n\t\t'Contents of a Class.',\n\t\t[ 'body', [MethodDefinition] ]),\n\tClass = abstract('Class', Node,\n\t\t'ClassDeclaration or ClassExpression.'),\n\t// TODO: extends Declaration too\n\tClassDeclaration = makeType(Class)('ClassDeclaration',\n\t\t'Class in declaration position.',\n\t\t[\n\t\t\t'id', Identifier,\n\t\t\t'superClass', Nullable(Expression),\n\t\t\t'body', ClassBody\n\t\t]),\n\tClassExpression = makeType(Class)('ClassExpression',\n\t\t// TODO: Test class with no superClass\n\t\t'Class in expression position.',\n\t\t[\n\t\t\t'id', Nullable(Identifier),\n\t\t\t'superClass', Nullable(Expression),\n\t\t\t'body', ClassBody\n\t\t]),\n\n\tModuleSpecifier = abstract('ModuleSpecifier', Node,\n\t\t'A specifier in an import or export declaration.'),\n\n\tImportSpecifierAbstract = abstract('ImportSpecifierAbstract', Node,\n\t\t'ImportSpecifier, ImportDefaultSpecifier, or ImportNamespaceSpecifier.'),\n\tImportDeclaration = n('ImportDeclaration',\n\t\t// TODO:ASSERT\n\t\t`\n\t\t\t\\`import specifiers from source\\`.\n\t\t\tOnly one specifier may be a ImportDefaultSpecifier.\n\t\t\tIf there is an ImportNamespaceSpecifier, it must be the only specifier.`,\n\t\t[\n\t\t\t'specifiers', [ImportSpecifierAbstract],\n\t\t\t// TODO: LiteralString\n\t\t\t'source', Literal\n\t\t]),\n\tImportSpecifier = makeType(ModuleSpecifier)('ImportSpecifier',\n\t\t`\n\t\t\tA non-default import. Used in an ImportDeclaration.\n\t\t\tFor \\`import { a } from \"source\"\\`, just pass one argument and local will = imported.\n\t\t\tFor \\`import { a as b } from \"source\"\\`, make imported \\`a\\` and local \\`b\\`.`,\n\t\t[\n\t\t\t'imported', Identifier,\n\t\t\t'local', Identifier\n\t\t],\n\t\t{\n\t\t\tpostConstruct() {\n\t\t\t\tif (this.local === null)\n\t\t\t\t\tthis.local = this.imported\n\t\t\t}\n\t\t}),\n\tImportDefaultSpecifier = makeType(ImportSpecifierAbstract)('ImportDefaultSpecifier',\n\t\t'The default export, as in `import a from \"source\"`.',\n\t\t[ 'local', Identifier ]),\n\tImportNamespaceSpecifier = makeType(ImportSpecifierAbstract)('ImportNamespaceSpecifier',\n\t\t'Object of every export, as in `import * as a from \"source\"`.',\n\t\t[ 'local', Identifier ]),\n\n\tExportSpecifier = \tmakeType(ModuleSpecifier)('ExportSpecifier',\n\t\t`\n\t\t\tA non-default export. Used in an ExportNamedDeclaration.\n\t\t\tFor \\`export { a } from \"source\"\\`, just pass one argument local will = exported.\n\t\t\tFor \\`export { a as b }\\`, make exported \\`b\\` and local \\`a\\`.`,\n\t\t[\n\t\t\t'exported', Identifier,\n\t\t\t'local', Identifier\n\t\t],\n\t\t{\n\t\t\tpostConstruct() {\n\t\t\t\tif (this.local === null)\n\t\t\t\t\tthis.local = this.exported\n\t\t\t}\n\t\t}),\n\tExportNamedDeclaration = n('ExportNamedDeclaration',\n\t\t`\n\t\t\tExports multiple values as in \\`export { a, b as c }\\`.\n\t\t\tIf source !== null,\n\t\t\tre-exports from that module as in \\`export { ... } from \"source\"\\`.`,\n\t\t[\n\t\t\t'declaration', Nullable(Declaration),\n\t\t\t'specifiers', [ExportSpecifier],\n\t\t\t// TODO: LiteralString\n\t\t\t'source', Nullable(Literal)\n\t\t]),\n\tExportDefaultDeclaration = n('ExportDefaultDeclaration',\n\t\t'`export default declaration`.',\n\t\t[\n\t\t\t'declaration', Union(Declaration, Expression)\n\t\t]),\n\tExportAllDeclaration = n('ExportAllDeclaration',\n\t\t'`export * from source`.',\n\t\t// TODO:LiteralString\n\t\t[ 'source', Literal ])\n"],"sourceRoot":"/src"}