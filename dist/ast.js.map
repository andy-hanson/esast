{"version":3,"sources":["ast.js"],"names":[],"mappings":"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","file":"ast.js","sourcesContent":["import Loc from './Loc'\nimport tuple from './private/tuple'\nimport { assert, pAdd } from './private/util'\n\nexport class ESNode { }\nexport class Statement extends ESNode { }\nexport class Expression extends ESNode { }\nexport class Declaration extends ESNode { }\nexport class Pattern extends ESNode { }\n\nconst makeType = superType => (name, ...namesTypes) => {\n\tconst type = tuple(name, superType, ...namesTypes)\n\tObject.assign(type.prototype, {\n\t\ttype: name,\n\t\ttoString() {\n\t\t\treturn JSON.stringify(pAdd(this, 'type', name), null, 2)\n\t\t}\n\t})\n\treturn type\n}\nconst n = makeType(ESNode)\nconst s = makeType(Statement)\nconst e = makeType(Expression)\n\n// TODO\nconst nullable = _ => _\n\nexport const\n\tProgram = n('Program', 'body', [Statement]),\n\tIdentifier = n('Identifier', 'name', String),\n\tBlockStatement = s('BlockStatement', 'body', [Statement]),\n\n\t// Expressions\n\tFunctionExpression = e('FunctionExpression',\n\t\t'id', Identifier, 'params', [Identifier], 'body', BlockStatement, 'generator', Boolean),\n\n\t// Value: Number | String | null | Boolean\n\tLiteral = e('Literal', 'value', Object),\n\tThisExpression = e('ThisExpression'),\n\tArrayExpression = e('ArrayExpression', 'elements', [Expression]),\n\tProperty = n('Property', 'kind', String, 'key', Object, 'value', Expression),\n\tObjectExpression = e('ObjectExpression', 'properties', [Property]),\n\tNewExpression = e('NewExpression', 'callee', Expression, 'arguments', [Expression]),\n\tCallExpression = e('CallExpression', 'callee', Expression, 'arguments', [Expression]),\n\tMemberExpression = e('MemberExpression',\n\t\t'object', Expression, 'property', Identifier, 'computed', Boolean),\n\n\tUnaryExpression = e('UnaryExpression', 'operator', String, 'argument', Expression),\n\tBinaryExpression = e('BinaryExpression',\n\t\t'operator', String, 'left', Expression, 'right', Expression),\n\tAssignmentExpression = e('AssignmentExpression',\n\t\t'operator', String, 'left', Pattern, 'right', Expression),\n\tYieldExpression = e('YieldExpression', 'argument', Expression, 'delegate', Boolean),\n\n\tVariableDeclarator = n('VariableDeclarator', 'id', Identifier, 'init', Expression),\n\tVariableDeclaration = s('VariableDeclaration',\n\t\t'kind', String, 'declarations', [VariableDeclarator]),\n\n\t// Statements\n\tReturnStatement = s('ReturnStatement', 'argument', Expression),\n\tThrowStatement = s('ThrowStatement', 'argument', Expression),\n\tLabeledStatement = s('LabeledStatement', 'label', Identifier, 'body', Statement),\n\tWhileStatement = s('WhileStatement', 'test', Expression, 'body', Statement),\n\tDebuggerStatement = s('DebuggerStatement'),\n\tExpressionStatement = s('ExpressionStatement', 'expression', Expression),\n\tIfStatement = s('IfStatement',\n\t\t'test', Expression, 'consequent', Statement, 'alternate', nullable(Statement)),\n\n\tBreakStatement = s('BreakStatement', 'label', nullable(Identifier)),\n\n\tSwitchCase = n('SwitchCase', 'test', Expression, 'consequent', [Statement]),\n\tSwitchStatement = s('SwitchStatement',\n\t\t'discriminant', Expression, 'cases', [SwitchCase], 'lexical', Boolean)\n"],"sourceRoot":"/src"}