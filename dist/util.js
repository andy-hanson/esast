if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './ast', './mangle-identifier', './specialize'], function (exports, _ast, _mangleIdentifier, _specialize) {
	'use strict';

	var _interopRequire = function (obj) { return obj && obj.__esModule ? obj['default'] : obj; };

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _mangleIdentifier2 = _interopRequire(_mangleIdentifier);

	var specialNameToId = new Map();
	var propertyToIdOrLiteral = new Map();

	var idCached = function idCached(name) {
		var _ = specialNameToId.get(name);
		if (_ === undefined) {
			_ = _ast.Identifier(_mangleIdentifier2(name));
			specialNameToId.set(name, _);
		}
		return _;
	},
	    propertyIdOrLiteralCached = function propertyIdOrLiteralCached(propertyName) {
		var _ = propertyToIdOrLiteral.get(propertyName);
		if (_ === undefined) {
			_ = _mangleIdentifier.propertyNameOk(propertyName) ? _ast.Identifier(propertyName) : _ast.Literal(propertyName);
			propertyToIdOrLiteral.set(propertyName, _);
		}
		return _;
	},
	    member = function member(object, propertyName) {
		return _specialize.memberExpression(object, propertyIdOrLiteralCached(propertyName));
	},
	    toStatement = function toStatement(_) {
		return _ instanceof _ast.Statement || _ instanceof _ast.Declaration ? _ : _ast.ExpressionStatement(_);
	},
	   

	// TODO:ES6 arrow functions
	thunk = function thunk(value) {
		return _specialize.functionExpressionThunk(_ast.BlockStatement([_ast.ReturnStatement(value)]), false);
	};
	exports.idCached = idCached;
	exports.propertyIdOrLiteralCached = propertyIdOrLiteralCached;
	exports.member = member;
	exports.toStatement = toStatement;
	exports.thunk = thunk;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFLQSxLQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQ2pDLEtBQU0scUJBQXFCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTs7QUFFaEMsS0FDTixRQUFRLEdBQUcsa0JBQUEsSUFBSSxFQUFJO0FBQ2xCLE1BQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsTUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3BCLElBQUMsR0FBRyxLQVpvRCxVQUFVLENBWW5ELG1CQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLGtCQUFlLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUM1QjtBQUNELFNBQU8sQ0FBQyxDQUFBO0VBQ1I7S0FFRCx5QkFBeUIsR0FBRyxtQ0FBQSxZQUFZLEVBQUk7QUFDM0MsTUFBSSxDQUFDLEdBQUcscUJBQXFCLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO0FBQy9DLE1BQUksQ0FBQyxLQUFLLFNBQVMsRUFBRTtBQUNwQixJQUFDLEdBQUcsa0JBbkJpQyxjQUFjLENBbUJoQyxZQUFZLENBQUMsR0FBRyxLQXJCcUIsVUFBVSxDQXFCcEIsWUFBWSxDQUFDLEdBQUcsS0FyQk0sT0FBTyxDQXFCTCxZQUFZLENBQUMsQ0FBQTtBQUNuRix3QkFBcUIsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO0dBQzFDO0FBQ0QsU0FBTyxDQUFDLENBQUE7RUFDUjtLQUVELE1BQU0sR0FBRyxnQkFBQyxNQUFNLEVBQUUsWUFBWTtTQUM3QixZQXpCZ0MsZ0JBQWdCLENBeUIvQixNQUFNLEVBQUUseUJBQXlCLENBQUMsWUFBWSxDQUFDLENBQUM7RUFBQTtLQUVsRSxXQUFXLEdBQUcscUJBQUEsQ0FBQztTQUNkLEFBQUMsQ0FBQyxpQkE5QjZCLFNBQVMsQUE4QmpCLElBQUksQ0FBQyxpQkEvQkwsV0FBVyxBQStCaUIsR0FBSSxDQUFDLEdBQUcsS0EvQnZCLG1CQUFtQixDQStCd0IsQ0FBQyxDQUFDO0VBQUE7Ozs7QUFHbEYsTUFBSyxHQUFHLGVBQUEsS0FBSztTQUNaLFlBaENPLHVCQUF1QixDQWdDTixLQW5DakIsY0FBYyxDQW1Da0IsQ0FBRSxLQWxDM0IsZUFBZSxDQWtDNEIsS0FBSyxDQUFDLENBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQztFQUFBLENBQUE7U0ExQjNFLFFBQVEsR0FBUixRQUFRO1NBU1IseUJBQXlCLEdBQXpCLHlCQUF5QjtTQVN6QixNQUFNLEdBQU4sTUFBTTtTQUdOLFdBQVcsR0FBWCxXQUFXO1NBSVgsS0FBSyxHQUFMLEtBQUsiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJsb2NrU3RhdGVtZW50LCBEZWNsYXJhdGlvbiwgRXhwcmVzc2lvblN0YXRlbWVudCwgSWRlbnRpZmllciwgTGl0ZXJhbCxcblx0TmV3RXhwcmVzc2lvbiwgUmV0dXJuU3RhdGVtZW50LCBTdGF0ZW1lbnQsIFRocm93U3RhdGVtZW50IH0gZnJvbSAnLi9hc3QnXG5pbXBvcnQgbWFuZ2xlSWRlbnRpZmllciwgeyBuZWVkc01hbmdsZSwgcHJvcGVydHlOYW1lT2sgfSBmcm9tICcuL21hbmdsZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHsgZnVuY3Rpb25FeHByZXNzaW9uVGh1bmssIG1lbWJlckV4cHJlc3Npb24gfSBmcm9tICcuL3NwZWNpYWxpemUnXG5cbmNvbnN0IHNwZWNpYWxOYW1lVG9JZCA9IG5ldyBNYXAoKVxuY29uc3QgcHJvcGVydHlUb0lkT3JMaXRlcmFsID0gbmV3IE1hcCgpXG5cbmV4cG9ydCBjb25zdFxuXHRpZENhY2hlZCA9IG5hbWUgPT4ge1xuXHRcdGxldCBfID0gc3BlY2lhbE5hbWVUb0lkLmdldChuYW1lKVxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF8gPSBJZGVudGlmaWVyKG1hbmdsZUlkZW50aWZpZXIobmFtZSkpXG5cdFx0XHRzcGVjaWFsTmFtZVRvSWQuc2V0KG5hbWUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0cHJvcGVydHlJZE9yTGl0ZXJhbENhY2hlZCA9IHByb3BlcnR5TmFtZSA9PiB7XG5cdFx0bGV0IF8gPSBwcm9wZXJ0eVRvSWRPckxpdGVyYWwuZ2V0KHByb3BlcnR5TmFtZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gcHJvcGVydHlOYW1lT2socHJvcGVydHlOYW1lKSA/IElkZW50aWZpZXIocHJvcGVydHlOYW1lKSA6IExpdGVyYWwocHJvcGVydHlOYW1lKVxuXHRcdFx0cHJvcGVydHlUb0lkT3JMaXRlcmFsLnNldChwcm9wZXJ0eU5hbWUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0bWVtYmVyID0gKG9iamVjdCwgcHJvcGVydHlOYW1lKSA9PlxuXHRcdG1lbWJlckV4cHJlc3Npb24ob2JqZWN0LCBwcm9wZXJ0eUlkT3JMaXRlcmFsQ2FjaGVkKHByb3BlcnR5TmFtZSkpLFxuXG5cdHRvU3RhdGVtZW50ID0gXyA9PlxuXHRcdChfIGluc3RhbmNlb2YgU3RhdGVtZW50IHx8IF8gaW5zdGFuY2VvZiBEZWNsYXJhdGlvbikgPyBfIDogRXhwcmVzc2lvblN0YXRlbWVudChfKSxcblxuXHQvLyBUT0RPOkVTNiBhcnJvdyBmdW5jdGlvbnNcblx0dGh1bmsgPSB2YWx1ZSA9PlxuXHRcdGZ1bmN0aW9uRXhwcmVzc2lvblRodW5rKEJsb2NrU3RhdGVtZW50KFsgUmV0dXJuU3RhdGVtZW50KHZhbHVlKSBdKSwgZmFsc2UpXG4iXSwic291cmNlUm9vdCI6Ii9zcmMifQ==