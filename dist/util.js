if (typeof define !== 'function') var define = require('amdefine')(module);define(['exports', './ast', './mangle-identifier', './specialize'], function (exports, _ast, _mangleIdentifier, _specialize) {
	'use strict';

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequire(obj) { return obj && obj.__esModule ? obj['default'] : obj; }

	var _mangleIdentifier2 = _interopRequire(_mangleIdentifier);

	var specialNameToId = new Map();
	var propertyToIdOrLiteral = new Map();

	var idCached = function idCached(name) {
		var _ = specialNameToId.get(name);
		if (_ === undefined) {
			_ = (0, _ast.Identifier)((0, _mangleIdentifier2)(name));
			specialNameToId.set(name, _);
		}
		return _;
	},
	    loc = function loc(ast, _loc) {
		ast.loc = _loc;
		return ast;
	},
	    member = function member(object, propertyName) {
		return (0, _specialize.memberExpression)(object, propertyIdOrLiteralCached(propertyName));
	},
	    propertyIdOrLiteralCached = function propertyIdOrLiteralCached(propertyName) {
		var _ = propertyToIdOrLiteral.get(propertyName);
		if (_ === undefined) {
			_ = (0, _mangleIdentifier.propertyNameOk)(propertyName) ? (0, _ast.Identifier)(propertyName) : (0, _ast.Literal)(propertyName);
			propertyToIdOrLiteral.set(propertyName, _);
		}
		return _;
	},
	   

	// TODO:ES6 arrow functions
	thunk = function thunk(value) {
		return (0, _specialize.functionExpressionThunk)((0, _ast.BlockStatement)([(0, _ast.ReturnStatement)(value)]), false);
	},
	    toStatement = function toStatement(_) {
		return _ instanceof _ast.Statement || _ instanceof _ast.Declaration ? _ : (0, _ast.ExpressionStatement)(_);
	};
	exports.idCached = idCached;
	exports.loc = loc;
	exports.member = member;
	exports.propertyIdOrLiteralCached = propertyIdOrLiteralCached;
	exports.thunk = thunk;
	exports.toStatement = toStatement;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFLQSxLQUFNLGVBQWUsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFBO0FBQ2pDLEtBQU0scUJBQXFCLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQTs7QUFFaEMsS0FDTixRQUFRLEdBQUcsU0FBWCxRQUFRLENBQUcsSUFBSSxFQUFJO0FBQ2xCLE1BQUksQ0FBQyxHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7QUFDakMsTUFBSSxDQUFDLEtBQUssU0FBUyxFQUFFO0FBQ3BCLElBQUMsR0FBRyxTQVpvRCxVQUFVLEVBWW5ELHdCQUFpQixJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLGtCQUFlLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUM1QjtBQUNELFNBQU8sQ0FBQyxDQUFBO0VBQ1I7S0FFRCxHQUFHLEdBQUcsYUFBQyxHQUFHLEVBQUUsSUFBRyxFQUFLO0FBQ25CLEtBQUcsQ0FBQyxHQUFHLEdBQUcsSUFBRyxDQUFBO0FBQ2IsU0FBTyxHQUFHLENBQUE7RUFDVjtLQUVELE1BQU0sR0FBRyxTQUFULE1BQU0sQ0FBSSxNQUFNLEVBQUUsWUFBWTtTQUM3QixnQkFyQmdDLGdCQUFnQixFQXFCL0IsTUFBTSxFQUFFLHlCQUF5QixDQUFDLFlBQVksQ0FBQyxDQUFDO0VBQUE7S0FFbEUseUJBQXlCLEdBQUcsU0FBNUIseUJBQXlCLENBQUcsWUFBWSxFQUFJO0FBQzNDLE1BQUksQ0FBQyxHQUFHLHFCQUFxQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUMvQyxNQUFJLENBQUMsS0FBSyxTQUFTLEVBQUU7QUFDcEIsSUFBQyxHQUFHLHNCQTNCb0IsY0FBYyxFQTJCbkIsWUFBWSxDQUFDLEdBQUcsU0E3QnFCLFVBQVUsRUE2QnBCLFlBQVksQ0FBQyxHQUFHLFNBN0JNLE9BQU8sRUE2QkwsWUFBWSxDQUFDLENBQUE7QUFDbkYsd0JBQXFCLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQTtHQUMxQztBQUNELFNBQU8sQ0FBQyxDQUFBO0VBQ1I7Ozs7QUFHRCxNQUFLLEdBQUcsU0FBUixLQUFLLENBQUcsS0FBSztTQUNaLGdCQWxDTyx1QkFBdUIsRUFrQ04sU0FyQ2pCLGNBQWMsRUFxQ2tCLENBQUUsU0FwQzFDLGVBQWUsRUFvQzJDLEtBQUssQ0FBQyxDQUFFLENBQUMsRUFBRSxLQUFLLENBQUM7RUFBQTtLQUUzRSxXQUFXLEdBQUcsU0FBZCxXQUFXLENBQUcsQ0FBQztTQUNkLEFBQUMsQ0FBQyxpQkF2Q2MsU0FBUyxBQXVDRixJQUFJLENBQUMsaUJBeENMLFdBQVcsQUF3Q2lCLEdBQUksQ0FBQyxHQUFHLFNBeEN2QixtQkFBbUIsRUF3Q3dCLENBQUMsQ0FBQztFQUFBLENBQUE7U0EvQmxGLFFBQVEsR0FBUixRQUFRO1NBU1IsR0FBRyxHQUFILEdBQUc7U0FLSCxNQUFNLEdBQU4sTUFBTTtTQUdOLHlCQUF5QixHQUF6Qix5QkFBeUI7U0FVekIsS0FBSyxHQUFMLEtBQUs7U0FHTCxXQUFXLEdBQVgsV0FBVyIsImZpbGUiOiJ1dGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmxvY2tTdGF0ZW1lbnQsIERlY2xhcmF0aW9uLCBFeHByZXNzaW9uU3RhdGVtZW50LCBJZGVudGlmaWVyLCBMaXRlcmFsLFxuXHRSZXR1cm5TdGF0ZW1lbnQsIFN0YXRlbWVudCB9IGZyb20gJy4vYXN0J1xuaW1wb3J0IG1hbmdsZUlkZW50aWZpZXIsIHsgcHJvcGVydHlOYW1lT2sgfSBmcm9tICcuL21hbmdsZS1pZGVudGlmaWVyJ1xuaW1wb3J0IHsgZnVuY3Rpb25FeHByZXNzaW9uVGh1bmssIG1lbWJlckV4cHJlc3Npb24gfSBmcm9tICcuL3NwZWNpYWxpemUnXG5cbmNvbnN0IHNwZWNpYWxOYW1lVG9JZCA9IG5ldyBNYXAoKVxuY29uc3QgcHJvcGVydHlUb0lkT3JMaXRlcmFsID0gbmV3IE1hcCgpXG5cbmV4cG9ydCBjb25zdFxuXHRpZENhY2hlZCA9IG5hbWUgPT4ge1xuXHRcdGxldCBfID0gc3BlY2lhbE5hbWVUb0lkLmdldChuYW1lKVxuXHRcdGlmIChfID09PSB1bmRlZmluZWQpIHtcblx0XHRcdF8gPSBJZGVudGlmaWVyKG1hbmdsZUlkZW50aWZpZXIobmFtZSkpXG5cdFx0XHRzcGVjaWFsTmFtZVRvSWQuc2V0KG5hbWUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0bG9jID0gKGFzdCwgbG9jKSA9PiB7XG5cdFx0YXN0LmxvYyA9IGxvY1xuXHRcdHJldHVybiBhc3Rcblx0fSxcblxuXHRtZW1iZXIgPSAob2JqZWN0LCBwcm9wZXJ0eU5hbWUpID0+XG5cdFx0bWVtYmVyRXhwcmVzc2lvbihvYmplY3QsIHByb3BlcnR5SWRPckxpdGVyYWxDYWNoZWQocHJvcGVydHlOYW1lKSksXG5cblx0cHJvcGVydHlJZE9yTGl0ZXJhbENhY2hlZCA9IHByb3BlcnR5TmFtZSA9PiB7XG5cdFx0bGV0IF8gPSBwcm9wZXJ0eVRvSWRPckxpdGVyYWwuZ2V0KHByb3BlcnR5TmFtZSlcblx0XHRpZiAoXyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRfID0gcHJvcGVydHlOYW1lT2socHJvcGVydHlOYW1lKSA/IElkZW50aWZpZXIocHJvcGVydHlOYW1lKSA6IExpdGVyYWwocHJvcGVydHlOYW1lKVxuXHRcdFx0cHJvcGVydHlUb0lkT3JMaXRlcmFsLnNldChwcm9wZXJ0eU5hbWUsIF8pXG5cdFx0fVxuXHRcdHJldHVybiBfXG5cdH0sXG5cblx0Ly8gVE9ETzpFUzYgYXJyb3cgZnVuY3Rpb25zXG5cdHRodW5rID0gdmFsdWUgPT5cblx0XHRmdW5jdGlvbkV4cHJlc3Npb25UaHVuayhCbG9ja1N0YXRlbWVudChbIFJldHVyblN0YXRlbWVudCh2YWx1ZSkgXSksIGZhbHNlKSxcblxuXHR0b1N0YXRlbWVudCA9IF8gPT5cblx0XHQoXyBpbnN0YW5jZW9mIFN0YXRlbWVudCB8fCBfIGluc3RhbmNlb2YgRGVjbGFyYXRpb24pID8gXyA6IEV4cHJlc3Npb25TdGF0ZW1lbnQoXylcbiJdLCJzb3VyY2VSb290IjoiL3NyYyJ9